<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [

<!ENTITY rfc2460 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2460.xml">
<!ENTITY rfc2402 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2402.xml">
<!ENTITY rfc1519 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1519.xml">
<!ENTITY rfc2464 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2464.xml">
<!ENTITY rfc2467 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2467.xml">
<!ENTITY rfc3587 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3587.xml">
<!ENTITY rfc3041 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3041.xml">
<!ENTITY rfc3513 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3513.xml">
<!ENTITY rfc3306 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3306.xml">
<!ENTITY rfc3956 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3956.xml">
<!ENTITY rfc4038 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4038.xml">
<!ENTITY rfc3879 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3879.xml">
<!ENTITY rfc4291 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4291.xml">
]>

<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?><?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="std" docName="draft-hinden-6man-rfc4291bis-01" obsoletes="4291" ipr="pre5378Trust200902">
<front>
<title abbrev="IPv6 Specification"> IP Version 6 Addressing Architecture</title>
<author fullname="Robert M. Hinden" initials="R"
            surname="Hinden">
      <organization>Check Point Software</organization>
      <address>
        <postal>
          <street>959 Skyway Road</street>
          <!-- Reorder these if your country does things differently -->
          <city>San Carlos</city>
          <region>CA</region>
          <code>94070</code>
          <country>USA</country>
        </postal>
        <phone></phone>
	<facsimile></facsimile>
        <email>bob.hinden@gmail.com</email>
        <!-- uri and facsimile elements may also be added -->
      </address>
</author>

<author fullname="Stephen E. Deering" initials="S"
            surname="Deering">
      <organization>Retired</organization>
      <address>
        <postal>
          <street></street>
          <!-- Reorder these if your country does things differently -->
          <city>Vancouver</city>
          <region>British Columbia</region>
          <code></code>
          <country>Canada</country>
        </postal>
        <phone></phone>
	<facsimile></facsimile>
        <email></email>
        <!-- uri and facsimile elements may also be added -->
      </address>
</author>

<date day="" month="" year="" />

<abstract>

   <t>This specification defines the addressing architecture of the IP
   Version 6 (IPv6) protocol.  The document includes the IPv6 addressing
   model, text representations of IPv6 addresses, definition of IPv6
   unicast addresses, anycast addresses, and multicast addresses, and an
   IPv6 node's required addresses.</t>

   <t>This document obsoletes RFC 4291, "IP Version 6 Addressing
   Architecture".</t>

</abstract>

</front>

<middle>

<section title=" Introduction">

   <t>This specification defines the addressing architecture of the IP
   Version 6 protocol.  It includes the basic formats for the various
   types of IPv6 addresses (unicast, anycast, and multicast).</t>

</section>

<section title="IPv6 Addressing"> 

   <t>IPv6 addresses are 128-bit identifiers for interfaces and sets of
   interfaces (where "interface" is as defined in Section 2 of
   <xref target="RFC2460"/>).
   There are three types of addresses:</t>

  <t><list>
  <t><list hangIndent="13" style="hanging">

    <t hangText="Unicast:">An identifier for a single interface.  A
    packet sent to a unicast address is delivered to the interface
    identified by that address.</t>

    <t hangText="Anycast:">An identifier for a set of interfaces
    (typically belonging to different nodes).  A packet sent to an
    anycast address is delivered to one of the interfaces identified by
    that address (the "nearest" one, according to the routing protocols'
    measure of distance).</t>

    <t hangText="Multicast:"> An identifier for a set of interfaces
    (typically belonging to different nodes).  A packet sent to a
    multicast address is delivered to all interfaces identified by that
    address.</t>

  </list></t>
  </list></t>
  
   <t>There are no broadcast addresses in IPv6, their function being
   superseded by multicast addresses.</t>

   <t>In this document, fields in addresses are given a specific name, for
   example, "subnet".  When this name is used with the term "ID" for
   identifier after the name (e.g., "subnet ID"), it refers to the
   contents of the named field.  When it is used with the term "prefix"
   (e.g., "subnet prefix"), it refers to all of the address from the
   left up to and including this field.</t>

   <t>In IPv6, all zeros and all ones are legal values for any field,
   unless specifically excluded.  Specifically, prefixes may contain, or
   end with, zero-valued fields.</t>

<section title="Addressing Model">

   <t>IPv6 addresses of all types are assigned to interfaces, not nodes.
   An IPv6 unicast address refers to a single interface.  Since each
   interface belongs to a single node, any of that node's interfaces'
   unicast addresses may be used as an identifier for the node.</t>

   <t>All interfaces are required to have at least one Link-Local unicast
   address (see Section 2.8 for additional required addresses).  A
   single interface may also have multiple IPv6 addresses of any type
   (unicast, anycast, and multicast) or scope.  Unicast addresses with a
   scope greater than link-scope are not needed for interfaces that are
   not used as the origin or destination of any IPv6 packets to or from
   non-neighbors.  This is sometimes convenient for point-to-point
   interfaces.  There is one exception to this addressing model:</t>

   <t><list>

      <t>A unicast address or a set of unicast addresses may be assigned to
      multiple physical interfaces if the implementation treats the
      multiple physical interfaces as one interface when presenting it
      to the internet layer.  This is useful for load-sharing over
      multiple physical interfaces.</t>

  </list></t>

   <t>Currently, IPv6 continues the IPv4 model in that a subnet prefix is
   associated with one link.  Multiple subnet prefixes may be assigned
   to the same link.</t>

</section>

<section title="Text Representation of IPv6 Addresses"> 

 <section title="Text Representation of Addresses"> 

   <t>There are three conventional forms for representing IPv6 addresses as
   text strings:</t>

    <t><list hangIndent="3" style="hanging">

    <t hangText="1.">The preferred form is x:x:x:x:x:x:x:x, where the 'x's are one to
      four hexadecimal digits of the eight 16-bit pieces of the address.
      Examples:</t>

      <?rfc subcompact="yes" ?>
      <t><list>
         <t>abcd:ef01:2345:6789:abcd:ef01:2345:6789</t>
         <t>2001:db8:0:0:8:800:200c:417a</t>
       </list></t>
       <?rfc subcompact="no" ?>
       
      <t>Note that it is not necessary to write the leading zeros in an
      individual field, but there must be at least one numeral in every
      field (except for the case described in 2.).</t>

    <t hangText="2.">Due to some methods of allocating certain styles of IPv6
      addresses, it will be common for addresses to contain long strings
      of zero bits.  In order to make writing addresses containing zero
      bits easier, a special syntax is available to compress the zeros.
      The use of "::" indicates one or more groups of 16 bits of zeros.
      The "::" can only appear once in an address.  The "::" can also be
      used to compress leading or trailing zeros in an address.</t>

      <t>For example, the following addresses</t>

      <?rfc subcompact="yes" ?>

      <t><list>
      <t><list hangIndent="30" style="hanging">
         <t hangText="2001:db8:0:0:8:800:200c:417a">a unicast address</t>
         <t hangText="ff01:0:0:0:0:0:0:101">a multicast address</t>
         <t hangText="0:0:0:0:0:0:0:1">the loopback address</t>
         <t hangText="0:0:0:0:0:0:0:0">the unspecified address</t>
       </list></t>
       </list></t>
       <?rfc subcompact="no" ?>
       
      <t>may be represented as</t>

      <?rfc subcompact="yes" ?>
      <t><list>
       <t><list hangIndent="30" style="hanging">
       <t hangText="2001:db8::8:800:200c:417a">a unicast address</t>
       <t hangText="ff01::101">a multicast address</t>
       <t hangText="::1">the loopback address</t>
       <t hangText="::">the unspecified address</t>
     </list></t>
     </list></t>
     <?rfc subcompact="no" ?>
     
    <t hangText="3.">An alternative form that is sometimes more convenient when dealing
      with a mixed environment of IPv4 and IPv6 nodes is
      x:x:x:x:x:x:d.d.d.d, where the 'x's are the hexadecimal values of
      the six high-order 16-bit pieces of the address, and the 'd's are
      the decimal values of the four low-order 8-bit pieces of the
      address (standard IPv4 representation).  Examples:</t>

      <t><list>
      <?rfc subcompact="yes" ?>
        <t>0:0:0:0:0:0:13.1.68.3</t>
        <t>0:0:0:0:0:ffff:129.144.52.38</t>
     <?rfc subcompact="no" ?>
     </list></t>
     
      <t>or in compressed form:</t>

     <?rfc subcompact="yes" ?>
      <t><list>
      <t> ::13.1.68.3</t>
       <t>::ffff:129.144.52.38</t>
      </list></t>
    <?rfc subcompact="no" ?>
     
</list></t>

</section>

<section title="Text Representation of Address Prefixes">

   <t>The text representation of IPv6 address prefixes is similar to the
   way IPv4 address prefixes are written in Classless Inter-Domain
   Routing (CIDR) notation
   <xref target="RFC1519"/>.
   An IPv6 address prefix is
   represented by the notation:</t>

   <t><list>
    <t>ipv6-address/prefix-length</t>
   </list></t>
   
  <t>where</t>

  <t><list hangIndent="14" style="hanging">

    <t hangText="ipv6-address">is an IPv6 address in any of the notations listed
     in Section 2.2.</t>

     <t hangText="prefix-length">is a decimal value specifying how many of the
     leftmost contiguous bits of the address comprise the prefix.</t>

  </list></t>
  
   <t>For example, the following are legal representations of the 60-bit
   prefix 20010db80000cd3 (hexadecimal):</t>

   <t><list>
      <t>2001:0db8:0000:cd30:0000:0000:0000:0000/60</t>
      <t>2001:0db8::cd30:0:0:0:0/60</t>
      <t>2001:0db8:0:cd30::/60</t>
   </list></t>
   
   <t>The following are NOT legal representations of the above prefix:</t>
    <t><list>
   <t><list hangIndent="21" style="hanging">
    <t  hangText="2001:0db8:0:cd3/60">may drop leading zeros, but not trailing
     zeros, within any 16-bit chunk of the address</t>

      <t  hangText="2001:0db8::cd30/60">address to left of "/" expands to
      2001:0db8:0000:0000:0000:0000:0000:cd30</t>

      <t  hangText="2001:0db8::cd3/60">address to left of "/" expands to
      2001:0db8:0000:0000:0000:0000:0000:0cd3</t>
    </list></t>
    </list></t>

   <t>When writing both a node address and a prefix of that node address
   (e.g., the node's subnet prefix), the two can be combined as follows:</t>

    <t><list>
     <?rfc subcompact="yes" ?>
    <t><list hangIndent="24" style="hanging">
     <t hangText="the node address">2001:0db8:0:cd30:123:4567:89ab:cdef</t>
     <t hangText="and its subnet number"> 2001:0db8:0:cd30::/60</t>
    </list></t>
    <?rfc subcompact="no" ?>

    <t><list hangIndent="24" style="hanging">
      <t hangText="can be abbreviated as">2001:0db8:0:cd30:123:4567:89ab:cdef/60</t>
    </list></t>
    </list></t>

    </section>

  <section title="Recommendation for outputting IPv6 addresses"> 

   <t>This section provides a recommendation for systems generating and
   outputting IPv6 addresses as text.  Note, all implementations must
   accept and process all addresses in the formats defined in the
   previous two sections of this document.  The recommendations are as
   follows:</t>

  <t><list hangIndent="3" style="hanging">

  <t hangText="1.">The hexadecimal digits "a", "b", "c", "d", "e", and "f" in an IPv6 address
   must be represented in lowercase.</t>

  <t hangText="2.">Leading zeros in a 16-Bit Field must be suppressed.  For example,</t>

  <t><list>
  <t>2001:0db8::0001</t>
  </list></t>

  <t>is not correct and must be represented as</t>
  
  <t><list>
   <t>2001:db8::1</t>
  </list></t>
  
  <t hangText="3.">A single 16-bit 0000 field must be represented as 0.</t>

  <t>The use of the symbol "::" must be used to its maximum capability.
  For example:</t>

  <t><list>
    <t>2001:db8:0:0:0:0:2:1</t>
  </list></t>

  <t>must be shortened to</t>

  <t><list>
  <t>2001:db8::2:1</t>
  </list></t>
  
  <t>Likewise,</t>

  <t><list>
  <t>2001:db8::0:1</t>
  </list></t>

  <t>is not correct, because the symbol "::" could
  have been used to produce a shorter representation</t>

  <t><list>
  <t>2001:db8::1.</t>
  </list></t>

  <t hangText="4.">When there is an alternative choice in the placement of a "::", the
  longest run of consecutive 16-bit 0 fields must be shortened, that is,
  in</t>

  <t><list>
  <t>2001:0:0:1:0:0:0:1</t>
  </list></t>

  <t>the sequence with three consecutive zero fields is shortened to</t>

  <t><list>
  <t>2001:0:0:1::1</t>
  </list></t>


  <t hangText="5.">When the length of the consecutive 16-bit 0 fields are
  equal, for example</t>

  <t><list>
  <t>2001:db8:0:0:1:0:0:1</t>
  </list></t>

  <t>the first sequence of zero bits
  must be shortened.  For example</t>

  <t><list>
  <t>2001:db8::1:0:0:1</t>
  </list></t>

  <t>is the correct representation.</t>

  <t hangText="6.">The symbol "::" must not be used to shorten just one
  16-bit 0 field.  For example, the representation</t>

  <t><list>
  <t>2001:db8:0:1:1:1:1:1</t>
  </list></t>
  
  <t>is correct, but</t>

  <t><list>
  <t>2001:db8::1:1:1:1:1</t>
  </list></t>
  
  <t>is not correct.</t>

  <t hangText="7.">The text representation method describe in this section should also be
  use for text Representation of IPv6 Address Prefixes.  For example</t>

   <t><list>
   <t>0:0:0:0:0:ffff:192.0.2.1</t>
  </list></t>

   <t>should be shown as</t>

   <t><list>
   <t>::ffff:192.0.2.1</t>
  </list></t>

  <t hangText="8.">The text representation method describe in this section should be applied
   for IPv6 addresses with embedded IPv4 address.  For example</t>

   <t><list>
   <t>2001:0db8:0000:cd30:0000:0000:0000:0000/60</t>
   </list></t>

   <t>should be shown as</t>

   <t><list>
   <t>2001:0db8:0:cd30::/60</t>
  </list></t>

  </list></t>

  </section>
 </section>

 <section title="Address Type Identification"> 

   <t>The type of an IPv6 address is identified by the high-order bits of
   the address, as follows:</t>

<figure><artwork align="left"><![CDATA[
   Address type         Binary prefix        IPv6 notation   Section
   ------------         -------------        -------------   -------
   Unspecified          00...0  (128 bits)   ::/128          2.5.2
   Loopback             00...1  (128 bits)   ::1/128         2.5.3
   Multicast            11111111             ff00::/8        2.7
   Link-Local unicast   1111111010           fe80::/10       2.5.6
   Global Unicast       (everything else)
  ]]></artwork></figure>

  
   <t>Anycast addresses are taken from the unicast address spaces (of any
   scope) and are not syntactically distinguishable from unicast
   addresses.</t>

   <t>The general format of Global Unicast addresses is described in
   Section 2.5.4.  Some special-purpose subtypes of Global Unicast
   addresses that contain embedded IPv4 addresses (for the purposes of
   IPv4-IPv6 interoperation) are described in Section 2.5.5.</t>

   <t>Future specifications may redefine one or more sub-ranges of the
   Global Unicast space for other purposes, but unless and until that
   happens, implementations must treat all addresses that do not start
   with any of the above-listed prefixes as Global Unicast addresses.</t>

    </section>

<section title="Unicast Addresses"> 

   <t>IPv6 unicast addresses are aggregatable with prefixes of arbitrary
   bit-length, similar to IPv4 addresses under Classless Inter-Domain
   Routing.</t>

   <t>There are several types of unicast addresses in IPv6, in particular,
   Global Unicast, site-local unicast (deprecated, see Section 2.5.7),
   and Link-Local unicast.  There are also some special-purpose subtypes
   of Global Unicast, such as IPv6 addresses with embedded IPv4
   addresses.  Additional address types or subtypes can be defined in
   the future.</t>

   <t>IPv6 nodes may have considerable or little knowledge of the internal
   structure of the IPv6 address, depending on the role the node plays
   (for instance, host versus router).  At a minimum, a node may
   consider that unicast addresses (including its own) have no internal
   structure:</t>

   <figure><artwork align="left"><![CDATA[
|                           128 bits                              |
+-----------------------------------------------------------------+
|                          node address                           |
+-----------------------------------------------------------------+
]]></artwork></figure>
   
   <t>A slightly sophisticated host (but still rather simple) may
   additionally be aware of subnet prefix(es) for the link(s) it is
   attached to, where different addresses may have different values for
   n:</t>

   <figure><artwork align="left"><![CDATA[
|          n bits               |           128-n bits            |
+-------------------------------+---------------------------------+
|       subnet prefix           |           interface ID          |
+-------------------------------+---------------------------------+
]]></artwork></figure>
   
   <t>Though a very simple router may have no knowledge of the internal
   structure of IPv6 unicast addresses, routers will more generally have
   knowledge of one or more of the hierarchical boundaries for the
   operation of routing protocols.  The known boundaries will differ
   from router to router, depending on what positions the router holds
   in the routing hierarchy.</t>

   <t>Except for the knowledge of the subnet boundary discussed in the
   previous paragraphs, nodes should not make any assumptions about the
   structure of an IPv6 address.</t>


  <section title="Interface Identifiers">

   <t>Interface identifiers in IPv6 unicast addresses are used to identify
   interfaces on a link.  They are required to be unique within a subnet
   prefix.  It is recommended that the same interface identifier not be
   assigned to different nodes on a link.  They may also be unique over
   a broader scope.  In some cases, an interface's identifier will be
   derived directly from that interface's link-layer address.  The same
   interface identifier may be used on multiple interfaces on a single
   node, as long as they are attached to different subnets.</t>

   <t>Note that the uniqueness of interface identifiers is independent of
   the uniqueness of IPv6 addresses.  For example, a Global Unicast
   address may be created with a local scope interface identifier and a
   Link-Local address may be created with a universal scope interface
   identifier.</t>

   <t>For all unicast addresses, except those that start with the binary
   value 000, Interface IDs are required to be 64 bits long and to be
   constructed in Modified EUI-64 format.</t>

   <t>Modified EUI-64 format-based interface identifiers may have
   universal scope when derived from a universal token (e.g., IEEE 802
   48-bit MAC or IEEE EUI-64 identifiers <xref target="EUI64"/>) or may
   have local scope where a global token is not available (e.g., serial
   links, tunnel end-points) or where global tokens are undesirable
   (e.g., temporary tokens for privacy <xref target="RFC3041"/>.</t>
   
   <t>Modified EUI-64 format interface identifiers are formed by inverting
   the "u" bit (universal/local bit in IEEE EUI-64 terminology) when
   forming the interface identifier from IEEE EUI-64 identifiers.  In
   the resulting Modified EUI-64 format, the "u" bit is set to one (1)
   to indicate universal scope, and it is set to zero (0) to indicate
   local scope.  The first three octets in binary of an IEEE EUI-64
   identifier are as follows:</t>

<figure><artwork align="left"><![CDATA[
       0       0 0       1 1       2
      |0       7 8       5 6       3|
      +----+----+----+----+----+----+
      |cccc|ccug|cccc|cccc|cccc|cccc|
      +----+----+----+----+----+----+
]]></artwork></figure>
   
   <t>written in Internet standard bit-order, where "u" is the
   universal/local bit, "g" is the individual/group bit, and "c" is the
   bits of the company_id.  Appendix A, "Creating Modified EUI-64 Format
   Interface Identifiers", provides examples on the creation of Modified
   EUI-64 format-based interface identifiers.</t>

   <t>The motivation for inverting the "u" bit when forming an interface
   identifier is to make it easy for system administrators to hand
   configure non-global identifiers when hardware tokens are not
   available.  This is expected to be the case for serial links and
   tunnel end-points, for example.  The alternative would have been for
   these to be of the form 0200:0:0:1, 0200:0:0:2, etc., instead of the
   much simpler 0:0:0:1, 0:0:0:2, etc.</t>

   <t>IPv6 nodes are not required to validate that interface identifiers
   created with modified EUI-64 tokens with the "u" bit set to universal
   are unique.</t>

   <t>The use of the universal/local bit in the Modified EUI-64 format
   identifier is to allow development of future technology that can take
   advantage of interface identifiers with universal scope.</t>

   <t>The details of forming interface identifiers are defined in the
   appropriate "IPv6 over &lt;link>" specification, such as "IPv6 over
   Ethernet" <xref target="RFC2464"/>, and "IPv6 over FDDI" <xref
   target="RFC2467"/>.</t>

  </section>

  <section title="The Unspecified Address">

   <t>The address 0:0:0:0:0:0:0:0 is called the unspecified address.  It
   must never be assigned to any node.  It indicates the absence of an
   address.  One example of its use is in the Source Address field of
   any IPv6 packets sent by an initializing host before it has learned
   its own address.</t>

   <t>The unspecified address must not be used as the destination address
   of IPv6 packets or in IPv6 Routing headers.  An IPv6 packet with a
   source address of unspecified must never be forwarded by an IPv6
   router.</t>
  </section>

  <section title="The Loopback Address">


   <t >The unicast address 0:0:0:0:0:0:0:1 is called the loopback address.
   It may be used by a node to send an IPv6 packet to itself.  It must
   not be assigned to any physical interface.  It is treated as having
   Link-Local scope, and may be thought of as the Link-Local unicast
   address of a virtual interface (typically called the "loopback
   interface") to an imaginary link that goes nowhere.</t>

   <t>The loopback address must not be used as the source address in IPv6
   packets that are sent outside of a single node.  An IPv6 packet with
   a destination address of loopback must never be sent outside of a
   single node and must never be forwarded by an IPv6 router.  A packet
   received on an interface with a destination address of loopback must
   be dropped.</t>

  </section>

  <section title="Global Unicast Addresses">

   <t>The general format for IPv6 Global Unicast addresses is as follows:</t>

<figure><artwork align="left"><![CDATA[
|         n bits         |   m bits  |       128-n-m bits         |
+------------------------+-----------+----------------------------+
| global routing prefix  | subnet ID |       interface ID         |
+------------------------+-----------+----------------------------+
]]></artwork></figure>

   <t>where the global routing prefix is a (typically hierarchically-
   structured) value assigned to a site (a cluster of subnets/links),
   the subnet ID is an identifier of a link within the site, and the
   interface ID is as defined in Section 2.5.1.</t>

   <t>All Global Unicast addresses other than those that start with binary
   000 have a 64-bit interface ID field (i.e., n + m = 64), formatted as
   described in Section 2.5.1.  Global Unicast addresses that start with
   binary 000 have no such constraint on the size or structure of the
   interface ID field.</t>

   <t>Examples of Global Unicast addresses that start with binary 000 are
   the IPv6 address with embedded IPv4 addresses described in Section
   2.5.5.  An example of global addresses starting with a binary value
   other than 000 (and therefore having a 64-bit interface ID field) can
   be found in <xref target="RFC3587"/>.</t>

  </section>

  <section title="IPv6 Addresses with Embedded IPv4 Addresses">

   <t>Two types of IPv6 addresses are defined that carry an IPv4 address in
   the low-order 32 bits of the address.  These are the "IPv4-Compatible
   IPv6 address" and the "IPv4-mapped IPv6 address".</t>

  <section title="IPv4-Compatible IPv6 Address">

   <t>The "IPv4-Compatible IPv6 address" was defined to assist in the IPv6
   transition.  The format of the "IPv4-Compatible IPv6 address" is as
   follows:</t>

   <figure><artwork align="left"><![CDATA[
|                80 bits               | 16 |      32 bits        |
+--------------------------------------+--------------------------+
|0000..............................0000|0000|    IPv4 address     |
+--------------------------------------+----+---------------------+
]]></artwork></figure>
   
   <t>Note: The IPv4 address used in the "IPv4-Compatible IPv6 address"
   must be a globally-unique IPv4 unicast address.</t>

   <t>The "IPv4-Compatible IPv6 address" is now deprecated because the
   current IPv6 transition mechanisms no longer use these addresses.
   New or updated implementations are not required to support this
   address type.</t>

  </section>
  
  <section title="IPv4-Mapped IPv6 Address">

   <t>A second type of IPv6 address that holds an embedded IPv4 address is
   defined.  This address type is used to represent the addresses of
   IPv4 nodes as IPv6 addresses.  The format of the "IPv4-mapped IPv6
   address" is as follows:</t>

<figure><artwork align="left"><![CDATA[
|                80 bits               | 16 |      32 bits        |
+--------------------------------------+--------------------------+
|0000..............................0000|ffff|    IPv4 address     |
+--------------------------------------+----+---------------------+
]]></artwork></figure>

   <t>See <xref target="RFC4038"/> for background on the usage of the
   "IPv4-mapped IPv6 address".</t>

   </section>
   
  </section>

  <section title="Link-Local IPv6 Unicast Addresses">

   <t>Link-Local addresses are for use on a single link.  Link-Local
   addresses have the following format:</t>

   <figure><artwork align="left"><![CDATA[
|   10     |
|  bits    |         54 bits         |          64 bits           |
+----------+-------------------------+----------------------------+
|1111111010|           0             |       interface ID         |
+----------+-------------------------+----------------------------+
   ]]></artwork></figure>
   
   <t>Link-Local addresses are designed to be used for addressing on a
   single link for purposes such as automatic address configuration,
   neighbor discovery, or when no routers are present.</t>

   <t>Routers must not forward any packets with Link-Local source or
   destination addresses to other links.</t>

  </section>


  <section title="Site-Local IPv6 Unicast Addresses">

   <t>Site-Local addresses were originally designed to be used for
   addressing inside of a site without the need for a global prefix.
   Site-local addresses are now deprecated as defined in
   <xref target="RFC3879"/>.</t>

   <t>Site-Local addresses have the following format:</t>

   <figure><artwork align="left"><![CDATA[
|   10     |
|  bits    |         54 bits         |         64 bits            |
+----------+-------------------------+----------------------------+
|1111111011|        subnet ID        |       interface ID         |
+----------+-------------------------+----------------------------+
]]></artwork></figure>
   
   <t>The special behavior of this prefix defined in <xref
   target="RFC3513"/> must no longer be supported in new implementations
   (i.e., new implementations must treat this prefix as Global
   Unicast).</t>

   <t>Existing implementations and deployments may continue to use this
   prefix.</t>

  </section>
  </section>

 <section title="Anycast Addresses">

   <t>An IPv6 anycast address is an address that is assigned to more than
   one interface (typically belonging to different nodes), with the
   property that a packet sent to an anycast address is routed to the
   "nearest" interface having that address, according to the routing
   protocols' measure of distance.</t>

   <t>Anycast addresses are allocated from the unicast address space, using
   any of the defined unicast address formats.  Thus, anycast addresses
   are syntactically indistinguishable from unicast addresses.  When a
   unicast address is assigned to more than one interface, thus turning
   it into an anycast address, the nodes to which the address is
   assigned must be explicitly configured to know that it is an anycast
   address.</t>

   <t>For any assigned anycast address, there is a longest prefix P of that
   address that identifies the topological region in which all
   interfaces belonging to that anycast address reside.  Within the
   region identified by P, the anycast address must be maintained as a
   separate entry in the routing system (commonly referred to as a "host
   route"); outside the region identified by P, the anycast address may
   be aggregated into the routing entry for prefix P.</t>

   <t>Note that in the worst case, the prefix P of an anycast set may be
   the null prefix, i.e., the members of the set may have no topological
   locality.  In that case, the anycast address must be maintained as a
   separate routing entry throughout the entire Internet, which presents
   a severe scaling limit on how many such "global" anycast sets may be
   supported.  Therefore, it is expected that support for global anycast
   sets may be unavailable or very restricted.</t>

   <t>One expected use of anycast addresses is to identify the set of
   routers belonging to an organization providing Internet service.
   Such addresses could be used as intermediate addresses in an IPv6
   Routing header, to cause a packet to be delivered via a particular
   service provider or sequence of service providers.</t>

   <t>Some other possible uses are to identify the set of routers attached
   to a particular subnet, or the set of routers providing entry into a
   particular routing domain.</t>

  <section title="Required Anycast Address">

   <t>The Subnet-Router anycast address is predefined.  Its format is as
   follows:</t>

   <figure><artwork align="left"><![CDATA[
|                         n bits                 |   128-n bits   |
+------------------------------------------------+----------------+
|                   subnet prefix                | 00000000000000 |
+------------------------------------------------+----------------+
]]></artwork></figure>
   
   <t>The "subnet prefix" in an anycast address is the prefix that
   identifies a specific link.  This anycast address is syntactically
   the same as a unicast address for an interface on the link with the
   interface identifier set to zero.</t>

   <t>Packets sent to the Subnet-Router anycast address will be delivered
   to one router on the subnet.  All routers are required to support the
   Subnet-Router anycast addresses for the subnets to which they have
   interfaces.</t>

   <t>The Subnet-Router anycast address is intended to be used for
   applications where a node needs to communicate with any one of the
   set of routers.</t>
  </section>
  </section>

  <section title="Multicast Addresses">

   <t>An IPv6 multicast address is an identifier for a group of interfaces
   (typically on different nodes).  An interface may belong to any
   number of multicast groups.  Multicast addresses have the following
   format:</t>

<figure><artwork align="left"><![CDATA[
|   8    |  4 |  4 |                  112 bits                   |
+------ -+----+----+---------------------------------------------+
|11111111|flgs|scop|                  group ID                   |
+--------+----+----+---------------------------------------------+
]]></artwork></figure>

    <t><list>

    <t>binary 11111111 at the start of the address identifies the address
      as being a multicast address.</t>

    </list></t>

<figure><artwork align="left"><![CDATA[
                                 +-+-+-+-+
   flgs is a set of 4 flags:     |0|R|P|T|
                                 +-+-+-+-+
]]></artwork></figure>
      
   <t><list>
   <t><list>
   <t>The high-order flag is reserved, and must be initialized to 0.</t>

   <t> T = 0 indicates a permanently-assigned ("well-known") multicast
   address, assigned by the Internet Assigned Numbers Authority
   (IANA).</t>

   <t>T = 1 indicates a non-permanently-assigned ("transient" or
   "dynamically" assigned) multicast address.</t>

   <t>The P flag's definition and usage can be found in <xref target="RFC3306"/>.</t>

   <t>The R flag's definition and usage can be found in <xref target="RFC3956"/>.</t>

   </list></t>

   <t>   scop is a 4-bit multicast scope value used to limit the scope of
      the multicast group.  The values are as follows:</t>
 
      <?rfc subcompact="yes" ?>
         <t><list>
	 <t>0  reserved</t>
         <t>1  Interface-Local scope</t>
         <t>2  Link-Local scope</t>
         <t>3  reserved</t>
         <t>4  Admin-Local scope</t>
         <t>5  Site-Local scope</t>
         <t>6  (unassigned)</t>
         <t>7  (unassigned)</t>
         <t>8  Organization-Local scope</t>
         <t>9  (unassigned)</t>
         <t>A  (unassigned)</t>
         <t>B  (unassigned)</t>
         <t>C  (unassigned)</t>
         <t>D  (unassigned)</t>
         <t>E  Global scope</t>
         <t>F  reserved</t>
    <?rfc subcompact="no" ?>
    
   <t>Interface-Local scope spans only a single interface on a node
         and is useful only for loopback transmission of multicast.</t>

   <t>Link-Local multicast scope spans the same topological region as
         the corresponding unicast scope.</t>

   <t>Admin-Local scope is the smallest scope that must be
         administratively configured, i.e., not automatically derived
         from physical connectivity or other, non-multicast-related
         configuration.</t>

   <t>Site-Local scope is intended to span a single site.</t>

   <t>Organization-Local scope is intended to span multiple sites
         belonging to a single organization.</t>

   <t>scopes labeled "(unassigned)" are available for administrators
         to define additional multicast regions.</t>

    </list></t>

    <t>group ID identifies the multicast group, either permanent or
    transient, within the given scope.  Additional definitions of the
    multicast group ID field structure are provided in <xref
    target="RFC3306"/>.</t>
    
   </list></t>

   <t>The "meaning" of a permanently-assigned multicast address is
   independent of the scope value.  For example, if the "NTP servers
   group" is assigned a permanent multicast address with a group ID of
   101 (hex), then</t>

   <t><list>
   <t>ff01:0:0:0:0:0:0:101 means all NTP servers on the same interface
      (i.e., the same node) as the sender.</t>

   <t>ff02:0:0:0:0:0:0:101 means all NTP servers on the same link as the
      sender.</t>

   <t>ff05:0:0:0:0:0:0:101 means all NTP servers in the same site as the
      sender.</t>

   <t>ff0e:0:0:0:0:0:0:101 means all NTP servers in the Internet.</t>
   </list></t>
   
   <t>Non-permanently-assigned multicast addresses are meaningful only
   within a given scope.  For example, a group identified by the non-
   permanent, site-local multicast address FF15:0:0:0:0:0:0:101 at one
   site bears no relationship to a group using the same address at a
   different site, nor to a non-permanent group using the same group ID
   with a different scope, nor to a permanent group with the same group
   ID.</t>

   <t>Multicast addresses must not be used as source addresses in IPv6
   packets or appear in any Routing header.</t>

   <t>Routers must not forward any multicast packets beyond of the scope
   indicated by the scop field in the destination multicast address.</t>

   <t>Nodes must not originate a packet to a multicast address whose scop
   field contains the reserved value 0; if such a packet is received, it
   must be silently dropped.  Nodes should not originate a packet to a
   multicast address whose scop field contains the reserved value F; if
   such a packet is sent or received, it must be treated the same as
   packets destined to a global (scop E) multicast address.</t>

  <section title="Pre-Defined Multicast Addresses">

   <t>The following well-known multicast addresses are pre-defined.  The
   group IDs defined in this section are defined for explicit scope
   values.</t>

   <t>Use of these group IDs for any other scope values, with the T flag
   equal to 0, is not allowed.</t>

   <t><list>
   <?rfc subcompact="yes" ?>
   <t><list hangIndent="30" style="hanging">
    <t  hangText="reserved multicast addresses:">ff00:0:0:0:0:0:0:0</t>
    <t  hangText="">ff01:0:0:0:0:0:0:0</t>
    <t  hangText="">ff02:0:0:0:0:0:0:0</t>
    <t  hangText="">ff03:0:0:0:0:0:0:0</t>
    <t  hangText="">ff04:0:0:0:0:0:0:0</t>
    <t  hangText="">ff05:0:0:0:0:0:0:0</t>
    <t  hangText="">ff06:0:0:0:0:0:0:0</t>
    <t  hangText="">ff07:0:0:0:0:0:0:0</t>
    <t  hangText="">ff08:0:0:0:0:0:0:0</t>
    <t  hangText="">ff09:0:0:0:0:0:0:0</t>
    <t  hangText="">ff0a:0:0:0:0:0:0:0</t>
    <t  hangText="">ff0b:0:0:0:0:0:0:0</t>
    <t  hangText="">ff0c:0:0:0:0:0:0:0</t>
    <t  hangText="">ff0d:0:0:0:0:0:0:0</t>
    <t  hangText="">ff0e:0:0:0:0:0:0:0</t>
    <t  hangText="">ff0f:0:0:0:0:0:0:0</t>
    </list></t>
    <?rfc subcompact="no" ?>
   </list></t>
    
   <t>The above multicast addresses are reserved and shall never be
   assigned to any multicast group.</t>

   <t><list>
   <?rfc subcompact="yes" ?>
   <t><list hangIndent="30" style="hanging">
    <t  hangText="all nodes addresses:">ff01:0:0:0:0:0:0:1</t>
    <t  hangText="">ff02:0:0:0:0:0:0:1</t>
     </list></t>
     <?rfc subcompact="no" ?>
   </list></t>
     
   <t>The above multicast addresses identify the group of all IPv6 nodes,
   within scope 1 (interface-local) or 2 (link-local).</t>

   <t><list>
   <?rfc subcompact="yes" ?>
   <t><list hangIndent="30" style="hanging">
   <t  hangText="all routers addresses: ">   ff01:0:0:0:0:0:0:2</t>
   <t  hangText="">ff02:0:0:0:0:0:0:2</t>
   <t  hangText="">ff05:0:0:0:0:0:0:2</t>
   </list></t>
   <?rfc subcompact="no" ?>
   </list></t>
   
   <t>The above multicast addresses identify the group of all IPv6 routers,
   within scope 1 (interface-local), 2 (link-local), or 5 (site-local).</t>

   <t><list>
   <t><list hangIndent="30" style="hanging">
   <t  hangText=" Solicited-Node Address: ">ff02:0:0:0:0:1:ffxx:xxxx</t>
   </list></t>
</list></t>

   <t>Solicited-Node multicast address are computed as a function of a
   node's unicast and anycast addresses.  A Solicited-Node multicast
   address is formed by taking the low-order 24 bits of an address
   (unicast or anycast) and appending those bits to the prefix
   FF02:0:0:0:0:1:FF00::/104 resulting in a multicast address in the
   range</t>

   <t><list>
   <t>ff02:0:0:0:0:1:ff00:0000</t>
    </list></t>

   <t>to</t>

   <t><list>
   <t>ff02:0:0:0:0:1:ffff:ffff</t>
    </list></t>

   <t>For example, the Solicited-Node multicast address corresponding to
   the IPv6 address 4037::01:800:200e:8c6c is ff02::1:ff0e:8c6c.  IPv6
   addresses that differ only in the high-order bits (e.g., due to
   multiple high-order prefixes associated with different aggregations)
   will map to the same Solicited-Node address, thereby reducing the
   number of multicast addresses a node must join.</t>

   <t>A node is required to compute and join (on the appropriate interface)
   the associated Solicited-Node multicast addresses for all unicast and
   anycast addresses that have been configured for the node's interfaces
   (manually or automatically).</t>
  </section>
  </section>

      <section title="A Node's Required Addresses">

   <t>A host is required to recognize the following addresses as
   identifying itself:</t>

   <t><list >

  <t><list hangIndent="3" style="hanging">
   <t  hangText="o">Its required Link-Local address for each interface.</t>

   <t  hangText="o">Any additional Unicast and Anycast addresses that have been
   configured for the node's interfaces (manually or automatically).</t>

   <t  hangText="o">The loopback address.</t>

   <t  hangText="o">The All-Nodes multicast addresses defined in Section 2.7.1.</t>

   <t  hangText="o">The Solicited-Node multicast address for each of its unicast and
   anycast addresses.</t>

   <t  hangText="o">Multicast addresses of all other groups to which the node
   belongs.</t>
 </list></t>
 </list></t>

   <t>A router is required to recognize all addresses that a host is
   required to recognize, plus the following addresses as identifying
   itself:</t>

   <t><list >

   <t><list hangIndent="3" style="hanging">

  <t  hangText="o">The Subnet-Router Anycast addresses for all interfaces for which
   it is configured to act as a router.</t>

   <t  hangText="o">All other Anycast addresses with which the router has been
   configured.</t>

   <t  hangText="o">The All-Routers multicast addresses defined in Section
   2.7.1.</t>

   </list></t>
   </list></t>

  </section>

  </section>


   <section anchor="IANA" title="IANA Considerations">

   <t>The "IPv4-Compatible IPv6 address" is deprecated by this document.
   The IANA should continue to list the address block containing these
   addresses at http://www.iana.org/assignments/ipv6-address-space as
   "Reserved by IETF" and not reassign it for any other purpose.  For
   example:</t>

<figure><artwork align="left"><![CDATA[
   0000::/8        Reserved by IETF        [RFC3513]      [1]
]]></artwork></figure>

   <t>The IANA has added the following note and link to this address block.</t>

    <t><list>
     <t><list hangIndent="5" style="hanging">
     <t hangText="[5]">0000::/96 was previously defined as the
     "IPv4-Compatible IPv6 address" prefix.  This definition has been
     deprecated by <xref target="RFC4291"/>.</t>
     </list></t>
     </list></t>

   <t>The IANA has updated the references for the IPv6 Address Architecture
   in the IANA registries accordingly.</t>


   </section>


  <section title="Security Considerations">

   <t>IPv6 addressing documents do not have any direct impact on Internet
   infrastructure security.  Authentication of IPv6 packets is defined
   in <xref target="RFC2402"/>.</t>

     </section>

  <section title="Acknowledgments">

   <t>The authors would like to acknowledge the contributions of Paul
   Francis, Scott Bradner, Jim Bound, Brian Carpenter, Matt Crawford,
   Deborah Estrin, Roger Fajman, Bob Fink, Peter Ford, Bob Gilligan,
   Dimitry Haskin, Tom Harsch, Christian Huitema, Tony Li, Greg
   Minshall, Thomas Narten, Erik Nordmark, Yakov Rekhter, Bill Simpson,
   Sue Thomson, Markku Savela, Larry Masinter, Jun-ichiro Itojun Hagino,
   Tatuya Jinmei, Suresh Krishnan, and Mahmood Ali.</t>

  </section>

</middle>

<back>



  <references title="Normative References">
    &rfc2460;
  </references>

  <references title="Informative References">

    &rfc2402;
    &rfc1519;
    &rfc2464;
    &rfc4291;

    <reference anchor="EUI64"
       target="http://standards.ieee.org/regauth/oui/tutorials/EUI64.html">
    <front>
    <title>IEEE, "Guidelines for 64-bit Global Identifier (EUI-64)
      Registration Authority"</title>
    <author/>
    <date month="March" year="1997" />
   </front>
   </reference>

    &rfc2467;
    &rfc3587;
    &rfc3041;
    &rfc3513;
    &rfc3306;
    &rfc3956;
    &rfc4038;
    &rfc3879;

  </references>    

  <section title="Creating Modified EUI-64 Format Interface Identifiers">

   <t>Depending on the characteristics of a specific link or node, there
   are a number of approaches for creating Modified EUI-64 format
   interface identifiers. This appendix describes some of these
   approaches.</t>

   <t>Links or Nodes with IEEE EUI-64 Identifiers</t>

   <t>The only change needed to transform an IEEE EUI-64 identifier to an
   interface identifier is to invert the "u" (universal/local) bit.  An
   example is a globally unique IEEE EUI-64 identifier of the form:</t>

<figure><artwork align="left"><![CDATA[
|0              1|1              3|3              4|4              6|
|0              5|6              1|2              7|8              3|
+----------------+----------------+----------------+----------------+
|cccccc0gcccccccc|ccccccccmmmmmmmm|mmmmmmmmmmmmmmmm|mmmmmmmmmmmmmmmm|
+----------------+----------------+----------------+----------------+
]]></artwork></figure>

   <t>where "c" is the bits of the assigned company_id, "0" is the value of
   the universal/local bit to indicate universal scope, "g" is
   individual/group bit, and "m" is the bits of the manufacturer-
   selected extension identifier.  The IPv6 interface identifier would
   be of the form:</t>

   <figure><artwork align="left"><![CDATA[
|0              1|1              3|3              4|4              6|
|0              5|6              1|2              7|8              3|
+----------------+----------------+----------------+----------------+
|cccccc1gcccccccc|ccccccccmmmmmmmm|mmmmmmmmmmmmmmmm|mmmmmmmmmmmmmmmm|
+----------------+----------------+----------------+----------------+
]]></artwork></figure>
   
   <t>The only change is inverting the value of the universal/local bit.</t>

   <t>Links or Nodes with IEEE 802 48-bit MACs</t>

   <t><xref target="EUI64"/> defines a method to create an IEEE EUI-64
   identifier from an IEEE 48-bit MAC identifier.  This is to insert two
   octets, with hexadecimal values of 0xFF and 0xFE (see the Note at the
   end of appendix), in the middle of the 48-bit MAC (between the
   company_id and vendor-supplied id).  An example is the 48-bit IEEE MAC
   with Global scope:</t>

<figure><artwork align="left"><![CDATA[
|0              1|1              3|3              4|
|0              5|6              1|2              7|
+----------------+----------------+----------------+
|cccccc0gcccccccc|ccccccccmmmmmmmm|mmmmmmmmmmmmmmmm|
+----------------+----------------+----------------+
]]></artwork></figure>

   <t>where "c" is the bits of the assigned company_id, "0" is the value of
   the universal/local bit to indicate Global scope, "g" is
   individual/group bit, and "m" is the bits of the manufacturer-
   selected extension identifier.  The interface identifier would be of
   the form:</t>

<figure><artwork align="left"><![CDATA[
|0              1|1              3|3              4|4              6|
|0              5|6              1|2              7|8              3|
+----------------+----------------+----------------+----------------+
|cccccc1gcccccccc|cccccccc11111111|11111110mmmmmmmm|mmmmmmmmmmmmmmmm|
+----------------+----------------+----------------+----------------+
]]></artwork></figure>

   <t>When IEEE 802 48-bit MAC addresses are available (on an interface or
   a node), an implementation may use them to create interface
   identifiers due to their availability and uniqueness properties.</t>

   <t>Links with Other Kinds of Identifiers</t>

   <t>There are a number of types of links that have link-layer interface
   identifiers other than IEEE EUI-64 or IEEE 802 48-bit MACs.  Examples
   include LocalTalk and Arcnet.  The method to create a Modified EUI-64
   format identifier is to take the link identifier (e.g., the LocalTalk
   8-bit node identifier) and zero fill it to the left.  For example, a
   LocalTalk 8-bit node identifier of hexadecimal value 0x4F results in
   the following interface identifier:</t>

<figure><artwork align="left"><![CDATA[
|0              1|1              3|3              4|4              6|
|0              5|6              1|2              7|8              3|
+----------------+----------------+----------------+----------------+
|0000000000000000|0000000000000000|0000000000000000|0000000001001111|
+----------------+----------------+----------------+----------------+
]]></artwork></figure>
   
   <t>Note that this results in the universal/local bit set to "0" to
   indicate local scope.</t>

   <t>Links without Identifiers</t>

   <t>There are a number of links that do not have any type of built-in
   identifier.  The most common of these are serial links and configured
   tunnels.  Interface identifiers that are unique within a subnet
   prefix must be chosen.</t>

   <t>When no built-in identifier is available on a link, the preferred
   approach is to use a universal interface identifier from another
   interface or one that is assigned to the node itself.  When using
   this approach, no other interface connecting the same node to the
   same subnet prefix may use the same identifier.</t>

   <t>If there is no universal interface identifier available for use on
   the link, the implementation needs to create a local-scope interface
   identifier.  The only requirement is that it be unique within a
   subnet prefix.  There are many possible approaches to select a
   subnet-prefix-unique interface identifier.  These include the
   following:</t>

   <?rfc subcompact="yes" ?>
   <t><list>
   <t>Manual Configuration</t>
   <t>Node Serial Number</t>
   <t>Other Node-Specific Token</t>
    </list></t>
    <?rfc subcompact="no" ?>
    
   <t>The subnet-prefix-unique interface identifier should be generated in
   a manner such that it does not change after a reboot of a node or if
   interfaces are added or deleted from the node.</t>

   <t>The selection of the appropriate algorithm is link and implementation
   dependent.  The details on forming interface identifiers are defined
   in the appropriate "IPv6 over &lt;link>" specification.  It is strongly
   recommended that a collision detection algorithm be implemented as
   part of any automatic algorithm.</t>

    <t><list hangIndent="7" style="hanging">
    <t hangText="Note:"><xref target="EUI64"/> actually defines 0xFF and
    0xFF as the bits to be inserted to create an IEEE EUI-64 identifier
    from an IEEE MAC- 48 identifier.  The 0xFF and 0xFE values are used
    when starting with an IEEE EUI-48 identifier.  The incorrect value
    was used in earlier versions of the specification due to a
    misunderstanding about the differences between IEEE MAC-48 and EUI-48
    identifiers.</t>

   <t hangText="">This document purposely continues the use of 0xFF and 0xFE
         because it meets the requirements for IPv6 interface
         identifiers (i.e., that they must be unique on the link), IEEE
         EUI-48 and MAC-48 identifiers are syntactically equivalent, and
         that it doesn't cause any problems in practice.</t>
       </list></t>

  </section>

  <section title="CHANGES SINCE RFC 4291">

   <t>This document has the following changes from RFC4291, "IP Version 6
   Addressing Architecture".  Numbers identify the Internet-Draft version
   in which the change was made.:</t>


<t><list>

     <t><list hangIndent="5" style="hanging">

       <t hangText="01)">The purpose of this draft is as follows:</t>
       
       <t><list hangIndent="3" style="hanging">

       <t hangText="o">Incorporate the updates made by RFC5952
       regarding the text format when outputting IPv6 addresses.  A new
       section was added for this and addresses shown in this document
       were changed to lower case.</t>

       <t hangText="o">Revision of this Section to document the changes
       from RFC4291.</t>

       <t hangText="o">Editorial changes.</t>

    </list></t>

    <t hangText="00)">The purpose of this version
     is to establish a baseline from RFC4291.  The only intended changes are
     formatting (XML is slightly different from .nroff), differences
     between an RFC and Internet Draft, fixing a few ID Nits, and updates
     to the authors information.  There should not be any content changes
     to the specification.</t>

  </list></t>
  </list></t>

  </section>

</back>

</rfc>
<!-- Created by hand from RFC4291 by Bob Hinden, August 2015 -->

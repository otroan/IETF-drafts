<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc toc="yes" ?>
<?rfc tocompact="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc comments="yes" ?>
<?rfc inline="yes" ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY rfc3041 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3041.xml">
<!ENTITY rfc3315 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3315.xml">
<!ENTITY rfc3633 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3633.xml">
<!ENTITY rfc6204 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6204.xml">
<!ENTITY rfc7083 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7083.xml">
]>

<rfc category="std" docName="draft-ietf-dhc-dhcpv6-stateful-issues-06.txt"
     ipr="trust200902" updates="3315,3633">
  <front>
    <title abbrev="Multiple Stateful Option">
    Issues with multiple stateful DHCPv6 options</title>

    <author fullname="Ole Troan" initials="O" surname="Troan">
      <organization abbrev="">Cisco Systems, Inc.</organization>
      <address>
        <postal>
          <street>Philip Pedersens vei 20</street>
          <city>N-1324 Lysaker</city>
          <region></region>
          <code></code>
          <country>Norway</country>
        </postal>
        <email>ot@cisco.com</email>
      </address>
    </author>
    <author fullname="Bernie Volz" initials="B" surname="Volz">
      <organization abbrev="">Cisco Systems, Inc.</organization>
      <address>
        <postal>
          <street>1414 Massachusetts Ave</street>
          <city>Boxborough, MA  01719</city>
          <region></region>
          <code></code>
          <country>USA</country>
        </postal>
        <email>volz@cisco.com</email>
      </address>
    </author>
    <author fullname="Marcin Siodelski" initials="M" surname="Siodelski">
      <organization abbrev="">ISC</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <region>CA</region>
          <code>94063</code>
          <country>USA</country>
        </postal>
        <email>msiodelski@gmail.com</email>
      </address>
    </author>

    <date year="2014" />

    <area>Internet</area>

    <workgroup>Network Working Group</workgroup>

    <!--  SECTION 0:  Abstract                      -->

    <abstract>
      <t>Dynamic Host Configuration Protocol for IPv6 (DHCPv6) was not
      written with the expectation that additional stateful DHCPv6
      options would be developed. IPv6 Prefix Options for Dynamic Host
      Configuration Protocol (DHCP) version 6 shoe-horned the new
      options for Prefix Delegation into DHCPv6. Implementation
      experience of the CPE model described in RFC6204
      has shown multiple issues with the DHCPv6 protocol in supporting
      multiple stateful options. This document updates RFC3315 and
      indirectly RFC3633.</t>
    </abstract>
  </front>

  <middle>
    <!--  SECTION 1:  Introduction                  -->

    <section title="Introduction">
      <t>DHCPv6 <xref target="RFC3315"/> was not written with the
      expectation that additional stateful DHCPv6 options would be
      developed. DHCPv6 Prefix Delegation <xref target="RFC3633"/>
      shoe-horned the new options for Prefix Delegation into
      DHCPv6. Implementation experience of the CPE model described in
      <xref target="RFC6204"/> has shown multiple issues with the
      DHCPv6 protocol in supporting multiple stateful option types,
      in paritcular IA_NA and IA_PD.</t>

      <t>This document describes a number of problems encountered with
      multiple IA option types and recommended changes to
      the DHCPv6 protocol specifications.</t>

      <t>The intention of this work is to modify the DHCP protocol
      specification to support multiple IA option types within a single
      DHCP session. This problem can also be solved by implementing
      a separate DHCP session (separate client state
      machine) per IA option type. This latter approach has a number
      of issues: additional DHCP protocol traffic, 'collisions'
      between stateless options also included with the IA options,
      divergence in that each IA option type specification specifies
      its 'own' version of the DHCP protocol.</t>

      <t>Note that while IA_TA options may be included with other IA
      option type requests, these generally are not renewed (there
      are no T1/T2 times) and have a separate life cycle from IA_NA 
      and IA_PD option types. IA_TA also has limited value when DHCPv6
      is used for address assignment, as the privacy issues identified
      for IPv6 stateless address assignment (<xref target="RFC3041"/>)
      do not apply to DHCPv6 assignments.</t>

      <t>The changes described in this document will be incorporated
      in a new revision of the DHCPv6 protocol specification <xref
      target="RFC3315"/>.</t>

    </section>

    <!--  SECTION 2: REQUIREMENTS LANGUAGE                                         -->

    <section title="Conventions">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in RFC 2119 <xref
      target="RFC2119"></xref>.</t>
    </section>

    <!-- conventions -->

    <!--  SECTION 3: DESCRIPTION                                                   -->

    <section title="Terminology">
      <t><list hangIndent="32" style="hanging">

	<t hangText="Stateful options">
	  Options that require dynamic binding state per client on the
	  server.</t>

	<t hangText="Identity association (IA):">
	  A collection of stateful options assigned to a client. Each
	  IA has an associated IAID. A client may have more than one
	  IA assigned to it; for example, one for each of its
	  interfaces. Each IA holds one type of IA option; for example,
	  an identity association for temporary addresses (IA_TA)
	  holds temporary addresses (see "identity association for
	  temporary addresses"). Throughout this document, "IA" is
	  used to refer to an identity association without identifying
	  the type of stateful option in the IA.</t>

      <t hangText="Allocated Resource (resource):">
        A value (or a collection of values) dynamically assigned to the
        client by the server and being carried in the stateful options.
        An example of the allocated resources are: IPv6 address or an
        IPv6 prefix. Information about an allocated resource is transported
        in options such as IA_NA Address or IA_PD Prefix. In the future,
        other types of allocated resources may be defined.
      </t>

	</list></t>
    </section>

    <!--  SECTION 4: Handling of Multiple IA Options Types                         -->

    <section title="Handling of multiple IA options types">
      <t>DHCPv6 was written with the assumption that the only stateful
      options were for assigning addresses. DHCPv6 PD describes how
      to extend the DHCPv6 protocol to handle prefix delegation, but
      <xref target="RFC3633"/> did not consider how DHCP address
      assignment and prefix delegation could co-exist.</t>

      <t>If a client requests multiple IA option types, but the server
      is configured to only offer a subset of them, the client could
      react in several ways. Reset the state machine and continue to
      send Solicit messages, create separate DHCP sessions for each
      IA option type and continue to Solicit for the unfulfilled IA
      options,
      or it could continue with the single session, and include the
      unfulfilled IA options on subsequent messages to the server.</t>

      <t>Proposed solution: the client should keep a single session
      with the server and include the missing options on subsequent
      messages (Request, Renew, and Rebind) to the server.</t>

      <t>The RFC3315 replacement text in the sections that follow is written
      without referencing IA_PD or prefix delegation explicitly, as these
      did not exist when RFC3315 was written. "IA option types" is used to
      generally mean IA_NA and/or IA_PD; and may also include IA_TA.</t>

      <section title="Advertise Message">
	<t><xref target="RFC3315"/> specifies that a client must ignore an Advertise
	message if a server will not assign any addresses to a
	client. A client requesting both IA_NA and IA_PD, with a
	server that only offers one of them, is not supported in the
	current protocol specification.</t>

	<t>Proposed solution: a client SHOULD accept Advertise messages,
	even when not all IA option types are being offered. A client
	SHOULD ignore an Advertise message when no bindings at all
	are being offered. The client SHOULD include the not offered
	IA option types in its Request.</t>

	<t>Replace Section 17.1.3 of <xref target="RFC3315"/>: (existing errata)</t>
	<figure><artwork>
  The client MUST ignore any Advertise message that includes a Status
  Code option containing the value NoAddrsAvail, with the exception
  that the client MAY display the associated status message(s) to the
  user.
	</artwork></figure>
	<t>With (this includes the changes made by <xref target="RFC7083"/>):</t>
	<figure><artwork>
  The client MUST ignore any Advertise message that contains no
  bindings (if only IA_NA and/or IA_TA options were requested,  this
  is a message that includes a Status Code option containing the
  value NoAddrsAvail), with the exception that the client MUST
  process an included SOL_MAX_RT option, MUST process an included
  INF_MAX_RT option, and MAY display the associated status message to
  the user.
	</artwork></figure>

	<t>And, replace:</t>
	<figure><artwork>
  -  The client MAY choose a less-preferred server if that server
     has a better set of advertised parameters, such as the
     available addresses advertised in IAs.
	</artwork></figure>
	<t>With:</t>
 	<figure><artwork>
  -  The client MAY choose a less-preferred server if that server
     has a better set of advertised parameters, such as the
     available options advertised in IAs.
	</artwork></figure>

        <t>It is important to note that the receipt of a Advertisement
	without any bindings does not imply that the client should
	restart the Solicit retransmissions timers. Doing so would
	lead to a Solicit/Advertisement storm.</t>

      </section>

      <section title="Placement of Status Codes">
	<t>
	In Reply messages IA specific status codes (i.e., NoAddrsAvail,
	NotOnlink, NoBinding, NoPrefixAvail) are encapsulated in the IA
	option.  In Advertisement messages the Status Code option with
	the NoAddrsAvail code is in the "global" scope.  That makes
	sense when the failure case is fatal.  With the introduction of
	multiple IA option types, there might be a case where a server
	is not willing to offer addresses, but might be willing to offer
	other stateful option types.
	</t>

	<t>
	While a Status Code option is implicitly bound to a specific type
	of IA, e.g. NoPrefixAvail is only applicable to IA_PD and
	NoAddrsAvail is only applicable to IA_NA/IA_TA, it may be
	problematic to make this assumption for all status codes.
	Ideally the Status Code option should be encapsulated in the IA
	option for all DHCP messages. This makes Advertisement messages
	equal to Reply messages.
	</t>

	<t>
	However, how a server formats the Advertise message when
	addresses are not available has been a point of some confusion
	and implementations seem to vary.
	</t>

	<t>
	Therefore, the Proposed solution is:
	</t>

	<t>
	Clients MUST be prepared to handle each of the following Advertise
	messages formats when there are no addresses available (even when
	no IA_PD was in the Solicit):
	<list style="numbers">
	<t>
	Advertise containing just a global scope status code option (of
	NoAddrsAvail) and no IA_NAs/IA_TAs.
	</t>
	<t>
	Advertise containing the IA_NAs and/or IA_TAs with encapsulated
	status code option (of NoAddrsAvail) and no global scope status
	code option.
	</t>
	<t>
	Advertise containing a global scope status code option (of
	NoAddrsAvail) and IA_NAs and/or IA_TAs with a status code option
	(of NoAddrsAvail).
	</t>
	</list>
	</t>

	<t>
	Servers MUST use the encapsulated status code option (of
	NoAddrsAvail) in an IA_NA/IA_TA and not a global scope status
	code option (of NoAddrsAvail) when no addresses will be assigned
	(2 in the above list). This means that the Advertise response
	matches the Reply response with respect to the handling of the
	NoAddrsAvail status.
	</t>

	<t>
	Replace the following paragraph in RFC 3315, section 17.2.2:
	</t>

<figure><artwork>
   If the server will not assign any addresses to any IAs in a
   subsequent Request from the client, the server MUST send an
   Advertise message to the client that includes only a Status
   Code option with code NoAddrsAvail and a status message for
   the user, a Server Identifier option with the server's DUID,
   and a Client Identifier option with the client's DUID.
</artwork></figure>

	<t>
	With:
	</t>

<figure><artwork>
   If the server will not assign any addresses to an IA in a
   subsequent Request from the client, the server MUST include
   the IA in the Advertise message with no addresses in the IA
   and a Status Code option in the IA containing status code
   NoAddrsAvail.
</artwork></figure>

      </section>

      <section title="T1/T2 Timers">
	<t>The T1 and T2 timers determine when the client will contact
	the server to extend lifetimes of information received in an
	IA. How should a client handle the case where multiple IA
	options have different T1 and T2 timers?</t>

	<t>In a multiple IA option types model, the T1/T2 timers are
	protocol timers, that should be independent of the IA options
	themselves. If we were to redo the DHCP protocol from scratch
	the T1/T2 timers should be carried in a separate DHCP
	option.</t>

	<t>Proposed solution: The server SHOULD set the T1/T2 timers
	in all IA options in Reply and Advertise messages to the same
        value. To deal with the case where servers have not yet been
        updated to do that, clients MUST use the shortest (explicit or
        implicit) T1/T2 timer (larger than 0) in any IA options in the
        Reply. Longer T1/T2 timers are ignored.</t>

      </section>

      <section title="Renew Message">
        <t>The Renew message, as described in <xref target="RFC3315"/>,
        allows a client to only renew bindings assigned via a Request
        message.</t>

	<t>In a multiple IA option type model, the Renew does not support
	the ability for the client to renew one IA option type while
	requesting bindings for other IA option types that were not
	available when the client sent the Request.</t>

	<t>Proposed solution: The client should continue with the IA
	options received, while continuing to include the other IA
	options in subsequent messages to the server. The client
	and server processing need to be modified. Note that this
	change makes the server's IA processing of Renew and Rebind
	similar to the Request processing.</t>

    <t>The first two subsections contain the required updates to
    <xref target="RFC3315"/> and <xref target="RFC3633"/>
    to accommodate this behavior on the client and the server. The
    remaining two subsections propose a "unified" text to be included
    in the <xref target="I-D.dhcwg-dhc-rfc3315bis"/>, describing
    the client's and server's behavior for renewing both addresses
    and prefixes.</t>

    <section title="Updates to RFC3315">
	<t>Replace Section 18.1.3 of <xref target="RFC3315"/>:</t>
	<figure><artwork>
  At time T1 for an IA, the client initiates a Renew/Reply message
  exchange to extend the lifetimes on any addresses in the IA.  The
  client includes an IA option with all addresses currently assigned
  to the IA in its Renew message.
	</artwork></figure>
	<t>With:</t>
	<figure><artwork>
  At time T1 for an IA, the client initiates a Renew/Reply message
  exchange to extend the lifetimes on any addresses in the IA.  The
  client includes an IA option with all addresses currently assigned
  to the IA in its Renew message. The client also includes an IA
  option for each binding it desires but has been unable to obtain.
	</artwork></figure>

	<t>Replace Section 18.2.3 of <xref target="RFC3315"/>:</t>
	<figure><artwork>
  If the server cannot find a client entry for the IA the server
  returns the IA containing no addresses with a Status Code option
  set to NoBinding in the Reply message.
	</artwork></figure>
	<t>With:</t>
	<figure><artwork>
  If the server cannot find a client entry for the IA the server
  creates the bindings for that client according to the server's
  policy and configuration information and returns the IAs and
  other information requested by the client.
	</artwork></figure>

   <t>Note that clients that communicate with servers that do not
   support this updated Renew processing will receive the NoBinding status
   for the IA which had no bindings. The client MUST continue
   to process the other IAs in the Reply. The client MAY attempt a
   Solicit/Advertise/Request/Reply sequence periodically to obtain
   bindings for these IAs. However, it MUST limit the frequency at
   which it does this to no more often than the renewal frequency.</t>
      </section>

      <section title="Updates to RFC3633">
        <t>Replace Section 12.2 of <xref target="RFC3633"/>:</t>
	    <t><list style="hanging" hangIndent='20'>
	      <t hangText="Renew message:">If the delegating router cannot
	      find a binding for the requesting router's IA_PD the
	      delegating router returns the IA_PD containing no prefixes
	      with a Status Code option set to NoBinding in the Reply
	      message.</t>
        </list></t>
        <t>With:</t>
	    <t><list style="hanging" hangIndent='20'>
	      <t hangText="Renew message:">If the delegating router cannot
	      find a binding for the requesting router's IA_PD the
	      delegating router creates the bindings for that client
          according to the server's policy and configuration
          information and returns the IAs and other information requested
          by the client.</t>
        </list></t>
      </section>

      <section title="Creation and Transmission of Renew Messages (unified text)">
        <t>To extend the valid and preferred lifetimes for the addresses
        and prefixes associated with IAs, the client sends a Renew message
        to the server from which the client obtained the addresses and
        prefixes.</t>

        <t>The server controls the time at which the client contacts the
        server to extend the lifetimes on client's bindings through the
        T1 and T2 parameters assigned to IAs. The server SHOULD assign the
        same T1 and T2 value to each binding assigned to the client. In this
        case the client uses the common T1 or T2 value returned in the IAs
        to determine the time when it should send Renew or Rebind message
        to the server. If the server sends different T1/T2 values for
        different IAs, the client uses the shortest T1/T2 value (larger than
        0). T1/T2 values in other IA options are ignored.</t>

        <t>If T1 or T2 is set to 0 by the server for all IA_NA and IA_PD
        options, or there are no T1 or T2 times (for an IA_TA), the client
        may send Renew or Rebind message, respectively, on the client's
        discretion.</t>

        <t>At time T1, the client that initiates a Renew/Reply message exchange,
        includes IA options for all bindings for which it desires to
        extend lifetimes in its Renew message. For each IA being included,
        the client stores all addresses or prefixes currently associated
        with the IA.</t>

        <t>The client also includes IA option for each binding it desires
        but has been unable to obtain. For example: a client which has
        non-temporary addresses assigned but hasn't been delegated a prefix,
        may include an IA_PD option (in addition to the IA_NA option) in the
        Renew message to request prefix delegation.
        </t>

        <t>The client constructing a Renew message SHOULD NOT include
        addresses or prefixes that the client does not have, in IA options. If
        the client included an address or prefix it does not have and the
        server does not allocate this address or prefix for the client, the
        server will return the IA Address or IA Prefix option with the
        lifetimes set to 0. This is a signal to the client to not use this
        address or prefix. The server MAY allocate a different address or
        prefix to the client and send it in the same IA.</t>

        <t>The client sets "msg-type" field to RENEW. The client generates
        a transaction ID and inserts this value in the "transaction-id"
        field.</t>

        <t>The client places the identifier of the destination server in a
        Server Identifier option.</t>

        <t>The client MUST include a Client Identifier option to identify
        itself to the server. The client adds any appropriate options,
        including one or more IA options.</t>

        <t>The client MUST include an Option Request option to indicate
        the options the client is interested in receiving. The client MAY
        include options with data values as hints to the server about
        parameter values the client would like to have returned.</t>

        <t>The client transmits the message according to section 14, using
        the following parameters:

        <list hangIndent="11" style="hanging">

          <t hangText="   IRT"> REN_TIMEOUT</t>

          <t hangText="   MRT"> REN_MAX_RT</t>

          <t hangText="   MRC"> 0</t>

          <t hangText="   MRD"> Remaining time until T2</t>

        </list></t>

        <t>If the server finds that any address or prefix sent by the
        client is not appropriate, according to the server's configuration
        information, the server sends back the IA with the corresponding IA
        Address (for inappropriate address) or IA Prefix option (for inapropriate
        prefix) with lifetimes set to 0. The client which receives the IA Address
        or IA Prefix option with lifetimes set to 0 MUST NOT use the
        corresponding address or prefix.</t>

        <t>The message exchange is terminated
        when time T2 is reached (see section 18.1.4), at which time the
        client begins a Rebind message exchange.</t>
      </section>

      <section title="Receipt of Renew Messages (unified text)">
          <t>When the server receives a Renew message via unicast from a
          client to which the server has not sent a unicast option, the server
          discards the Renew message and responds with a Reply message
          containing a Status Code option with the value UseMulticast, a
          Server Identifier option containing the server's DUID, the Client
          Identifier option from the client message, and no other options.</t>

          <t>When the server receives a Renew message that contains an IA option
          from a client, it locates the client's binding and verifies that the
          information in the IA from the client matches the information
          stored for the client.</t>

          <t>If the server cannot find a client entry for the IA, the server
          creates the bindings for that client according to the server's policy
          and configuration information and returns the IAs and other information
          requested by the client. For each IA for which the server will not
          create a binding the server returns an IA option containing a Status
          Code option set to NoBinding in the Reply message. </t>

          <t>If the server finds that any address or prefix sent by
          the client is not appropriate, according to the server's configuration
          information, the server sends back the IA with the corresponding IA Address
          (for invalid address) or IA Prefix option (for invalid prefix) with
          lifetimes set to 0.</t>

          <t>The server constructs a Reply message by setting the "msg-type"
          field to REPLY, and copying the transaction ID from the Renew
          message into the transaction-id field.</t>

          <t>The server MUST include a Server Identifier option containing the
          server's DUID and the Client Identifier option from the Renew
          message in the Reply message.</t>

          <t>The server includes other options containing configuration
          information to be returned to the client as described in
          <xref target='RFC3315'/>.</t>
      </section>
    </section>

     <section title="Rebind Message">
        <t>The Rebind message, as described in <xref target="RFC3315"/>
        does not explicitly specify what a server should do when an IA
        option which contains no addresses is present.</t>

        <t>The first two subsections contain the required updates to
        <xref target="RFC3315"/> and <xref target="RFC3633"/>
        to accommodate this behavior on the client and the server. The
        remaining two subsections propose a "unified" text to be included
        in the <xref target="I-D.dhcwg-dhc-rfc3315bis"/>, describing
        the client's and server's behavior for renewing both addresses
        and prefixes.</t>

        <section title="Updates to RFC3315">
	<t>Replace Section 18.1.4 of <xref target="RFC3315"/>:</t>
	<figure><artwork>
  At time T2 for an IA (which will only be reached if the server to
  which the Renew message was sent at time T1 has not responded), the
  client initiates a Rebind/Reply message exchange with any available
  server.  The client includes an IA option with all addresses
  currently assigned to the IA in its Rebind message.
	</artwork></figure>
	<t>With:</t>
	<figure><artwork>
  At time T2 for an IA (which will only be reached if the server to
  which the Renew message was sent at time T1 has not responded), the
  client initiates a Rebind/Reply message exchange with any available
  server.  The client includes an IA option with all addresses
  currently assigned to the IA in its Rebind message.  The client
  also includes an IA option for each binding it desires but has been
  unable to obtain.
	</artwork></figure>

        <t>Replace Section 18.2.4 of <xref target="RFC3315"/> with the
   following text to clarify how the server should handle all of the
   possible conditions:

   <list hangIndent="2" style="hanging">

   <t hangText="">
   When the server receives a Rebind message that contains an IA option
   from a client, it locates the client's binding and verifies that the
   information in the IA from the client matches the information stored
   for that client.
   </t>

   <t hangText="">
   If the server finds the addresses in the IA for the client and the
   server determines that the addresses in the IA are appropriate for
   the link to which the client's interface is attached according to the
   server's explicit configuration information, the server SHOULD send
   back the IA to the client with new lifetimes and T1/T2 times.
   </t>

   <t hangText="">
   If the server cannot find a client entry for the IA and the server
   determines that the addresses in the IA are not appropriate for the
   link to which the client's interface is attached according to the
   server's explicit configuration information, the server MAY send a
   Reply message to the client containing the client's IA, with the
   lifetimes for the addresses in the IA set to zero.  This Reply
   constitutes an explicit notification to the client that the addresses
   in the IA are no longer valid.  In this situation, if the server does
   not send a Reply message it silently discards the Rebind message.
   </t>

   <t hangText="">
   If the server cannot find a client entry for the IA and the server
   determines that the addresses in the IA are appropriate for the link
   to which the client's interface is attached according to the server's
   explicit configuration information, and the addresses are not in use,
   the server MAY assign the addresses to the client and send a Reply
   message to the client with new lifetimes and T1/T2 times for the
   bindings. If the server cannot assign the addresses to the client,
   the server returns the IA containing no addresses with a Status Code
   option set to NoBinding in the Reply message.
   </t>

   <t hangText="">
   Note: A server SHOULD NOT provide additional bindings to the client
   as the client could accept a Reply from a different server (this is
   the same issue as in the Discussion under the Rapid Commit option,
   see section 22.14).
   </t>

   <t hangText="">
   The server constructs a Reply message by setting the "msg-type" field
   to REPLY, and copying the transaction ID from the Rebind message into
   the transaction-id field.
   </t>

   <t hangText="">
   The server MUST include a Server Identifier option containing the
   server's DUID and the Client Identifier option from the Rebind
   message in the Reply message.
   </t>

   <t hangText="">
   The server includes other options containing configuration
   information to be returned to the client as described in section
   18.2.
   </t>

   </list></t>
        </section>

        <section title="Updates to RFC3633">
          <t>TBD</t>
        </section>

        <section title="Creation and Transmission of Rebind Messages (unified text)">
          <t>At time T2 for an IA (which will only be reached if the server to
          which the Renew message was sent at time T1 has not responded), the
          client initiates a Rebind/Reply message exchange with any available
          server. The client includes an IA option with all addresses or prefixes
          currently assigned to the IA in its Rebind message. The client includes
          IA options for all other bindings which lifetimes the client is
          willing to extend. For each IA being included, the client stores
          all addresses or prefixes currently associated with the IA.</t>

          <t>The client also includes IA option for each binding it desires
          but has been unable to obtain. For example: a client which has
          non-temporary addresses assigned but has not been delegated a prefix,
          may include an IA_PD option (in addition to the IA_NA option) in the
          Rebind message to request the prefix delegation.
          </t>

          <t>When the client requests an assignment of the new bindings in a
          Rebind message, it MUST include the Rapid Commit option to indicate
          to the server that the client is willing to accept the allocation of
          new bindings.</t>

          <t>The client constructing a Rebind message SHOULD NOT include
          addresses or prefixes in IA options that the client does not have. If
          the client included an address or prefix it does not have and the
          server does not allocate this address or prefix for the client, the
          server will return the IA Address or IA Prefix option with the
          lifetimes set to 0. This is an indication to the client to not use this
          address or prefix. The server MAY allocate a different address or
          prefix to the client and send it in the same IA.</t>

          <t>The client sets the "msg-type" field to REBIND. The client generates
          a transaction ID and inserts this value in the "transaction-id" field.</t>

          <t>The client MUST include a Client Identifier option to identify itself
          to the server. The client adds any appropriate options, including one or
          more IA options. The client MUST include the list of addresses and prefixes
          the client currently has associated with the IAs in the Rebind message.</t>

          <t>The client MUST include an Option Request option to indicate the options
          that client is interested in receiving. The client MAY include options
          with data values as hints to the server about parameter values the client
          would like to have returned.</t>

          <t>The client MUST include Rapid Commit option if it expects the server
          to create new bindings e.g. when the client having only addresses assigned
          desires also a prefix delegation.
          </t>

        <t>The client transmits the message according to Section 14, using
        the following parameters:

        <list hangIndent="11" style="hanging">

          <t hangText="   IRT"> REB_TIMEOUT</t>

          <t hangText="   MRT"> REB_MAX_RT</t>

          <t hangText="   MRC"> 0</t>

          <t hangText="   MRD"> Remaining time until valid lifetimes of all addresses
          or prefixes in the IA have expired</t>

          <t>The message exchange is terminated when the valid lifetimes of
          all the addresses or prefixes assigned to the IA expire, at
          which time the client has several alternative actions to choose
          from; for example:

          <list hangIndent="3" style="hanging">

          <t hangText="-"> The client may choose to use a Solicit message to locate a new
          DHCP server and send a Request for the expired IA to the new
          server.</t>

          <t hangText="-"> The client may have other addresses or prefixes in other IAs,
          so the client may choose to discard the expired IA and use the other IAs.</t>
          </list></t>


        </list></t>
        </section>

        <section title="Receipt of Rebind Messages (unified text)">
          <t>When the server receives a Rebind message that contains an IA option
          from a client, it locates the client's binding and verifies that the
          information in the IA from the client matches the information stored
          for that client.
          </t>

          <t>If the server finds the address or prefix in the IA for the client and the
          server determines that the addresses or prefixes in the IA are appropriate for
          the link to which the client's interface is attached according to the
          server's explicit configuration information, the server SHOULD send
          back the IA to the client with new lifetimes and T1/T2 times.
          </t>

          <t>If the server cannot find a client entry for the IA and the server
          determines that the addresses or prefixes in the IA are not appropriate
          for the link to which the client's interface is attached according to the
          server's explicit configuration information, the server MAY send a
          Reply message to the client containing the client's IA, with the
          lifetimes for the addresses or prefixes in the IA set to zero.  This Reply
          constitutes an explicit notification to the client that the addresses or
          prefixes in the IA are no longer valid.  In this situation, if the server does
          not send a Reply message it silently discards the Rebind message.
          </t>

          <t>If the server cannot find a client entry for the IA, the IA is empty
          (i.e. contains no addresses or prefixes) and the client included Rapid Commit
          option in the Rebind message, the server MAY assign the addresses or
          prefixes to this IA and send a Reply message to the client with this IA
          containing allocated addresses or prefixes with lifetimes and T1/T2 times.
          In the case when the client included addresses or prefixes in the IA,
          included addresses or prefixes are appropriate for the link to which the
          client's interface is attached according to the server's explicit
          configuration information and the they are not in use,
          the server MAY allocate these addresses or prefixes to the client. If the
          server does not allocate addresses or prefixes to the client, the server
          returns the IA containing only Status Code option set to NoBinding in the
          Reply message.</t>

          <t>Note: A server SHOULD NOT provide additional bindings to the client
          as the client could accept a Reply from a different server (this is
          the same issue as in the Discussion under the Rapid Commit option,
          see section 22.14).
          </t>

          <t>The server constructs a Reply message by setting the "msg-type" field
          to REPLY, and copying the transaction ID from the Rebind message into
          the transaction-id field.
          </t>

          <t>The server MUST include a Server Identifier option containing the
          server's DUID and the Client Identifier option from the Rebind
          message in the Reply message.
          </t>

          <t>The server MUST include a Rapid Commit option in the Reply message if
          the server has been configured to assign new bindings during processing
          of a Rebind message and the client included this option in the Rebind
          message.</t>

          <t>The server includes other options containing configuration
          information to be returned to the client as described in section
          18.2.</t>

        </section>

      </section>

      <section title="Confirm Message">
	<t>The Confirm message, as described in <xref target="RFC3315"/>,
        is specific to address assignment. It allows a server without a
        binding to reply to the message, under the assumption that the
        server only needs knowledge about the prefix(es) on the link,
        to inform the client that the address is likely valid or not.
        This message is sent when e.g. the client has moved and needs
        to validate its addresses. Not all bindings can be validated by
        servers and the Confirm message provides for this by specifying
        that a server that is unable to determine the on-link status
        MUST NOT send a Reply.</t>

	<t>Note: Confirm has a specific meaning and does not overload
	Renew/Rebind. It also is lower processing cost as the server
	does NOT need to extend lease times or otherwise send back
	other configuration options.</t>

	<t>Proposed solution: Allow and specify the Confirm message
	for other IA option types. The server performs the same test
	as for addresses on the delegated prefixes (see
	<xref target="RFC3315"/>, section 18.2.2).</t>

	<t>Replace Section 12.1 of <xref target="RFC3633"/>:</t>
	<figure><artwork>
  If such verification is needed the requesting router MUST initiate
  a Rebind/Reply message exchange as described in section 18.1.4,
  "Creation and Transmission of Rebind Messages" of RFC 3315, with
  the exception that the retransmission parameters should be set as
  for the Confirm message, described in section 18.1.2, "Creation
  and Transmission of Confirm Messages" of RFC 3315.  The requesting
  router includes any IA_PDs, along with prefixes associated with
  those IA_PDs in its Rebind message.

  ...

  The Confirm and Decline message types are not used with Prefix
  Delegation.
	</artwork></figure>
	<t>With:</t>
	<figure><artwork>
  If such verification is needed the requesting router MUST initiate
  a Confirm message exchange as described in section 18.1.2,
  "Creation and Transmission of Confirm Messages" of RFC 3315. The
  requesting router includes any IA_PDs, along with prefixes
  associated with those IA_PDs in its Confirm message.

  ...

  The Decline message type is not used with Prefix Delegation.
	</artwork></figure>

      </section>

      <section title="Decline should not unnecessary trigger a Release">

      <t>Some clients will send a Release message for other bindings
      they may have received after they determine a conflict and have
      correctly sent a Decline message for the conflicting address(es).
      It is recommended that a client SHOULD NOT send a Release
      message for other bindings it may have received just because it
      sent a Decline message. The client should retain the non-conflicting
      bindings.</t>

      </section>

      <section title="Multiple Provisioning Domains">
          <t>This document has assumed that all DHCP servers on a
          network are in a single provisioning domain and thus should be
          "equal" in the service that they offer. This was also assumed
          by <xref target="RFC3315"/> and <xref target="RFC3633"/>.</t>

          <t>One could envision a network where the DHCP servers are in multiple
          provisioning domains, and it may be desirable to have the DHCP client
          obtain different IA types from different provisioning domains. How a
          client detects the multiple provisioning domains and how it would
          interact with the multiple servers in these different domains is outside
          the scope of this document.</t>

      </section>

    </section>

    <!--  SECTION 5:  IANA Considerations           -->

    <section title="IANA Considerations">
      <t>This specification does not require any IANA actions.</t>
    </section>

    <!--  SECTION 6:  Security Considerations      	-->

    <section title="Security Considerations">
      <t>There are no new security considerations pertaining to this
      document.</t>
    </section>

    <!--  SECTION 7:  Acknowledgements     			-->

    <section title="Acknowledgements">

    <t>Thanks to many people that contributed to identify the issues in this
    document, including Ralph Droms, John, Brzozowski, Ted Lemon, Hemant Singh,
    Wes Beebee, Gaurau Halwasia, Bud Millword, and Tim Winters.</t>

    </section>
  </middle>

  <back>
    <!--  SECTION 8.1:  Normative References		-->

    <references title="Normative References">
      &rfc2119;
      &rfc3315;
      &rfc3633;
      &rfc7083;
    </references>

    <!--  SECTION 8.2:  Informative References		-->

    <references title="Informative References">
      &rfc3041;
      &rfc6204;
      <?rfc include="reference.I-D.dhcwg-dhc-rfc3315bis" ?>
    </references>

  </back>
</rfc>

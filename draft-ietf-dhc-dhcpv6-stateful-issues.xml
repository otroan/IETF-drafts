<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc toc="yes" ?>
<?rfc tocompact="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc comments="yes" ?>
<?rfc inline="yes" ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY rfc4941 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4941.xml">
<!ENTITY rfc3315 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3315.xml">
<!ENTITY rfc3633 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3633.xml">
<!ENTITY rfc6059 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6059.xml">
<!ENTITY rfc7084 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7084.xml">
<!ENTITY rfc7083 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7083.xml">
<!ENTITY rfc7227 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7227.xml">
]>

<rfc category="std" docName="draft-ietf-dhc-dhcpv6-stateful-issues-07.txt"
     ipr="trust200902" updates="3315,3633">
  <front>
    <title abbrev="Multiple Stateful Options">
    Issues and Recommendations with Multiple Stateful DHCPv6 Options</title>

    <author fullname="Ole Troan" initials="O" surname="Troan">
      <organization abbrev="">Cisco Systems, Inc.</organization>
      <address>
        <postal>
          <street>Philip Pedersens vei 20</street>
          <city>N-1324 Lysaker</city>
          <region></region>
          <code></code>
          <country>Norway</country>
        </postal>
        <email>ot@cisco.com</email>
      </address>
    </author>
    <author fullname="Bernie Volz" initials="B" surname="Volz">
      <organization abbrev="">Cisco Systems, Inc.</organization>
      <address>
        <postal>
          <street>1414 Massachusetts Ave</street>
          <city>Boxborough, MA  01719</city>
          <region></region>
          <code></code>
          <country>USA</country>
        </postal>
        <email>volz@cisco.com</email>
      </address>
    </author>
    <author fullname="Marcin Siodelski" initials="M" surname="Siodelski">
      <organization abbrev="">ISC</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <region>CA</region>
          <code>94063</code>
          <country>USA</country>
        </postal>
        <email>msiodelski@gmail.com</email>
      </address>
    </author>

    <date year="2014" />

    <area>Internet</area>

    <workgroup>Network Working Group</workgroup>

    <!--  SECTION 0:  Abstract                      -->

    <abstract>
      <t>Dynamic Host Configuration Protocol for IPv6 (DHCPv6) was not
      written with the expectation that additional stateful DHCPv6
      options would be developed. IPv6 Prefix Options for Dynamic Host
      Configuration Protocol (DHCP) version 6 shoe-horned the new
      options for Prefix Delegation into DHCPv6. Implementation
      experience of the CPE model described in RFC 7084
      has shown multiple issues with the DHCPv6 protocol in supporting
      multiple stateful options. This document updates RFC 3315 and
      RFC 3633.</t>
    </abstract>
  </front>

  <middle>
    <!--  SECTION 1:  Introduction                  -->

    <section title="Introduction">

      <t>DHCPv6 <xref target="RFC3315"/> was not written with the
      expectation that additional stateful DHCPv6 options would be
      developed.  DHCPv6 Prefix Delegation <xref target="RFC3633"/>
      shoe-horned the new options for Prefix Delegation into DHCPv6.
      Implementation experience of the CPE model described in
      <xref target="RFC7084"/> has shown issues with the DHCPv6
      protocol in supporting multiple stateful option types, in
      particular IA_NA and IA_PD.</t>

      <t>This document describes a number of problems encountered
      with coexistence of the IA_NA and IA_PD option types and
      changes to the DHCPv6 protocol specifications to address
      these problems.</t>

      <t>The intention of this work is to clarify and, where needed, modify
      the DHCP protocol specification to support multiple IA option types
      within a single DHCP session. However, as it is not possible to
      know what future IA option types might be used for, this work is
      primarily to clarify DHCP operation when IA_NA and IA_PD options
      are being requested as per <xref target="RFC7084"/>. And, to
      provide a framework to support new IA option types, assuming they
      are similar enough. Future documents that define new IA option
      types will need to specify whether they fit into this framework
      or define the DHCP operation for the new and existing IA option
      types, as appropriate.</t>

      <t>There are two general solutions to the problem of supporting
      multiple IA option types. One is by using a separate DHCP session
      (separate instances of the client state machine) per IA option type.
      While conceptually simple, this approach has a number of issues:
      multiple instances the state machine in clients, additional DHCP
      protocol traffic, 'collisions' between other configuration options,
      divergence in that each IA option type specification specifies its
      'own' version of the DHCP protocol. The other is by using a single
      DHCP session and state machine, which is the approach taken by
      this document (see <xref target='single-session'/>).</t>

      <t>Note that while IA_TA options may be included with other IA option
      type requests, these generally are not renewed (there are no T1/T2
      times) and have a separate life cycle from IA_NA and IA_PD option
      types.  IA_TA also has limited value when DHCPv6 is used for address
      assignment, as the privacy issues identified for IPv6 stateless
      address assignment (<xref target="RFC4941"/>) do not apply to
      DHCPv6 assignments.</t>

      <t>The changes described in this document are intended to be
      incorporated in a new revision of the DHCPv6 protocol
      specification (<xref target="I-D.dhcwg-dhc-rfc3315bis"/>).</t>

    </section>

    <!--  SECTION 2: REQUIREMENTS LANGUAGE                                         -->

    <section title="Conventions">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119"></xref>.</t>
    </section>

    <!-- conventions -->

    <!--  SECTION 3: DESCRIPTION                                                   -->

    <section title="Terminology">
    <t>In addition to the terminology defined in <xref target="RFC3315"/>,
    <xref target="RFC3633"/>, and <xref target="RFC7227"/>, the following
    terminology is used in this document:
    </t>
      <t><list hangIndent="32" style="hanging">

	<t hangText="Resource (allocable resource):">
	  A value (or a collection of values) dynamically assigned to the
	  client by the server and being carried in the stateful options.
	  Examples of resources are an IPv6 address or an
	  IPv6 prefix. Information about the resources is transported
	  in stateful options such as IA_NA, for addresses, and IA_PD,
	  for prefix delegations. In the future, other types of resources
	  and stateful options may be defined.</t>

	<t hangText="Identity association (IA):">
	  A collection of resources assigned to a client. Each
	  IA has an associated IAID. A client may have more than one
	  IA assigned to it; for example, one for each of its
	  interfaces. Each IA holds one type of IA option; for example,
	  an identity association for temporary addresses (IA_TA)
	  holds temporary addresses. Throughout this document, "IA" is
	  used to refer to an identity association without identifying
	  the type of resources in the IA.</t>

	<t hangText="IA option types:">
	  This is used to generally mean an IA_NA and/or IA_PD and may also
	  include IA_TA, as well as any future IA options.</t>
	  
	<t hangText="Stateful options:">
	  Options that require dynamic binding state per client on the
	  server.</t>	  

	</list></t>
    </section>

    <!--  SECTION 4: Handling of Multiple IA Options Types                         -->

    <section anchor='single-session' title="Handling of multiple IA options types">
      <t>DHCPv6 was written with the assumption that the only stateful
      options were for assigning addresses. DHCPv6 PD describes how
      to extend the DHCPv6 protocol to handle prefix delegation, but
      <xref target="RFC3633"/> did not consider how DHCP address
      assignment and prefix delegation could co-exist.</t>

      <t>If a client requests multiple IA option types, but the server
      is configured to only offer a subset of them, the client could
      react in several ways. Reset the state machine and continue to
      send Solicit messages, create separate DHCP sessions for each
      IA option type and continue to Solicit for the unfulfilled IA
      options,
      or it could continue with the single session, and include the
      unfulfilled IA options on subsequent messages to the server.</t>

      <t>Proposed solution: the client should keep a single session
      with the server and include the missing options on subsequent
      messages (Request, Renew, and Rebind) to the server.</t>

      <section title="Placement of Status Codes">
	<t>
	In Reply messages IA specific status codes (i.e., NoAddrsAvail,
	NotOnlink, NoBinding, NoPrefixAvail) are encapsulated in the IA
	option.  In Advertise messages the Status Code option with
	the NoAddrsAvail code is in the top-level. That makes
	sense when the failure case is fatal. However, with the
	introduction of other stateful option types, there may be
        cases where a server is not willing to offer addresses, but is
        willing to offer other resources, e.g. delegated prefixes.
	</t>

	<t>
	Ideally the Status Code option should be encapsulated in the IA
	option for all DHCP messages. This also makes the NoAddrsAvail
	and NoPrefixAvail Status Code option placement for Advertise
	messages identical to Reply messages.
	</t>

	<t>
	In addition, how a server formats the Advertise message when
	addresses are not available has been a point of some confusion
	and implementations seem to vary (some strictly follow RFC 3315
	while others assumed it was encapsulated in the IA option as for
	Reply messages).
	</t>

	<t>
	Therefore, the Proposed solution is:
	</t>

	<t>
	Clients MUST be prepared to handle each of the following Advertise
	messages formats when there are no addresses available (even when
	no other IA option types were in the Solicit):
	<list style="numbers">
	<t>
	Advertise containing just a top-level Status Code option (of
	NoAddrsAvail) and no IA_NAs/IA_TAs.
	</t>
	<t>
	Advertise containing the IA_NAs and/or IA_TAs with encapsulated
	Status Code option (of NoAddrsAvail) and no top-level Status
	Code option.
	</t>
	<t>
	Advertise containing a top-level Status Code option (of
	NoAddrsAvail) and IA_NAs and/or IA_TAs with a Status Code option
	(of NoAddrsAvail).
	</t>
	</list>
	</t>

	<t>
	Servers MUST return the Status Code option (of
	NoAddrsAvail) encapsulated in an IA_NA/IA_TA options and not as a
        top-level Status Code option (of NoAddrsAvail) when no
        addresses will be assigned (2 in the above list). This means that
        the Advertise response matches the Reply response with respect to
        the handling of the NoAddrsAvail status.
	</t>

	<t>
	Replace the following paragraph in RFC 3315, section 17.2.2:
	</t>

<figure><artwork>
   If the server will not assign any addresses to any IAs in a
   subsequent Request from the client, the server MUST send an
   Advertise message to the client that includes only a Status
   Code option with code NoAddrsAvail and a status message for
   the user, a Server Identifier option with the server's DUID,
   and a Client Identifier option with the client's DUID.
</artwork></figure>

	<t>
	With:
	</t>

<figure><artwork>
   If the server will not assign any addresses to an IA in a
   subsequent Request from the client, the server MUST include
   the IA in the Advertise message with no addresses in the IA
   and a Status Code option encapsulated in the IA containing
   status code NoAddrsAvail.
</artwork></figure>

      </section>


      <section title="Advertise Message">
	<t><xref target="RFC3315"/> specifies that a client must ignore an Advertise
	message if a server will not assign any addresses to a
	client. A client requesting both IA_NA and IA_PD, with a
	server that only offers one of them, is not supported in the
	current protocol specification.</t>

	<t>Proposed solution: a client SHOULD accept Advertise messages,
	even when not all IA option types are being offered. And, in this
        case, the client SHOULD include the not offered IA option types
        in its Request. A client SHOULD only ignore an Advertise message
        when all IA options include no offered addresses or delegated
        prefixes. Note that ignored messages MUST still be processed for
        SOL_MAX_RT and INF_MAX_RT options as specified in <xref
        target="RFC7083"/>.</t>

	<t>Replace Section 17.1.3 of RFC 3315: (existing errata)</t>
	<figure><artwork>
  The client MUST ignore any Advertise message that includes a Status
  Code option containing the value NoAddrsAvail, with the exception
  that the client MAY display the associated status message(s) to the
  user.
	</artwork></figure>
	<t>With (this includes the changes made by <xref target="RFC7083"/>):</t>
	<figure><artwork>
  The client MUST ignore any Advertise message that contains no
  addresses (IAADDR options encapsulated in IA_NA or IA_TA options)
  and no delegated prefixes (IAPREFIX options encapsulated in IA_PD
  options, see RFC 3633) with the exception that the client
  MUST process an included SOL_MAX_RT option (RFC 7083), MUST
  process an included INF_MAX_RT option (RFC 7083), and MAY
  display any associated status message(s) to the user.
	</artwork></figure>

	<t>And, replace:</t>
	<figure><artwork>
  -  The client MAY choose a less-preferred server if that server
     has a better set of advertised parameters, such as the
     available addresses advertised in IAs.
	</artwork></figure>
	<t>With:</t>
 	<figure><artwork>
  -  The client MAY choose a less-preferred server if that server
     has a better set of advertised parameters, such as the
     available options advertised in IAs.
	</artwork></figure>

        <t>It is important to note that the receipt of an Advertise message
	without any addresses and delegated prefixes does not imply that
	the client should restart the Solicit retransmissions timers. Doing
	so would lead to a Solicit/Advertise storm.</t>

      </section>


      <section title="T1/T2 Timers">
	<t>The T1 and T2 times determine when the client will contact
	the server to extend lifetimes of information received in an
	IA. How should a client handle the case where multiple IA
	options have different T1 and T2 times?</t>

	<t>In a multiple IA option type model, the T1/T2 times are
	protocol timers, that should be independent of the IA options
	themselves. If we were to redo the DHCP protocol from scratch
	the T1/T2 times should be carried in a separate DHCP
	option.</t>

	<t>Proposed solution: The server MUST set the T1/T2 times
	in all IA options in a Reply or Advertise message to the same
        value. To deal with the case where servers have not yet been
        updated to do that, clients MUST use the shortest (explicit or
        implicit) T1/T2 times (larger than 0), from the same IA option,
        in the Reply. T1/T2 times from other IAs are ignored.</t>

      </section>

    <section title="Renew and Rebind Messages">
      <t>This section presents issues with handling multiple IA option types
      in the context of creation and processing the Renew and Rebind messages.
      It also proposes relevant updates to the <xref target="RFC3315"/> and
      <xref target="RFC3633"/>.</t>
      <section title="Renew Message" anchor="renew-message">
        <t>The Renew message, as described in <xref target="RFC3315"/>,
        allows a client to only renew bindings assigned via a Request
        message.</t>

	    <t>In a multiple IA option type model, the Renew does not support
	    the ability for the client to renew one IA option type while
	    requesting bindings for other IA option types that were not
	    available when the client sent the Request.</t>

	    <t>Proposed solution: The client should continue with the IA
	    options received, while continuing to include the other IA
	    options in subsequent messages to the server. The client
	    and server processing need to be modified. Note that this
	    change makes the server's IA processing of Renew similar
        to the Request processing.</t>
      </section>

     <section title="Rebind Message">
       <t> In the <xref target="renew-message"/> it has been proposed that
       the client includes IA options in a Renew message for the bindings it
       desires but has been unable to obtain by sending a Request message,
       apart from the IA options for the existing bindings.</t>

       <t>At time T2, the client stops sending Renew messages to the server and
       initiates the Rebind/Reply message exchange with any available server.
       In this case, it should be possible to continue trying to obtain new
       bindings using the Rebind message if the client failed to get the
       response from the server to the Renew message.</t>

       <t>The Rebind message, as described in <xref target="RFC3315"/>
       does not explicitly specify what a server should do when an IA
       option which contains no addresses is present.</t>

       <t>Proposed solution: The client should continue with the IA options
       received and it MAY include additional IA options to request creation
       of additional bindings.</t>
     </section>

     <section title="Updates to section 18.1.3. of RFC 3315">

       <t>Replace Section 18.1.3. of RFC 3315 with the following text:
       <list hangIndent="2" style="hanging">
         <t>To extend the valid and preferred lifetimes for the addresses
         associated with an IA, the client sends a Renew message to the server
         from which the client obtained the addresses in the IA containing an
         IA option for the IA.  The client includes IA Address options in the
         IA option for the addresses associated with the IA.  The server
         determines new lifetimes for the addresses in the IA according to the
         administrative configuration of the server.  The server may also add
         new addresses to the IA.  The server may remove addresses from the IA
         by setting the preferred and valid lifetimes of those addresses to
         zero.</t>

         <t>The server controls the time at which the client contacts the server
         to extend the lifetimes on assigned addresses through the T1 and T2
         parameters assigned to an IA.</t>

         <t>At time T1 for an IA, the client initiates a Renew/Reply message
         exchange to extend the lifetimes on any addresses in the IA.</t>

         <t>If T1 or T2 had been set to 0 by the server (for an IA_NA) or there are no
         T1 or T2 times (for an IA_TA) in a previous Reply, the client may send a
         Renew or Rebind message, respectively, at the client's discretion.</t>

         <t>The client sets the "msg-type" field to RENEW.  The client generates
         a transaction ID and inserts this value in the "transaction-id"
         field.</t>

         <t>The client places the identifier of the destination server in a
         Server Identifier option.</t>

         <t>The client MUST include a Client Identifier option to identify itself
         to the server.  The client adds any appropriate options, including
         one or more IA options.  The client MUST include the list of
         addresses the client currently has associated with the IAs in the
         Renew message.</t>

         <t>The client includes an IA option with all addresses currently assigned
         to the IA in its Renew message.  The client also includes IA
         options for all other bindings for which the client desires to
         extend the lifetimes of addresses.  The client MUST only include
         addresses in the IA that the client obtained from the server and
         are still valid (have non-zero lifetime).</t>

         <t>The client MAY include an IA option for each binding it desires but
         has been unable to obtain.  This IA option MUST NOT contain any
         addresses.  However, it MAY contain the IA Address option with
         IPv6 address field set to 0 to indicate the client?s preference
         for the  preferred and valid lifetimes for any newly assigned
         addresses.</t>

         <t>The client MUST include an Option Request option (see section 22.7)
         to indicate the options the client is interested in receiving.  The
         client MAY include options with data values as hints to the server
         about parameter values the client would like to have returned.</t>

         <t>The client transmits the message according to section 14, using the
         following parameters:

          <list hangIndent="11" style="hanging">

          <t hangText="   IRT"> REN_TIMEOUT</t>

          <t hangText="   MRT"> REN_MAX_RT</t>

          <t hangText="   MRC"> 0</t>

          <t hangText="   MRD"> Remaining time until T2</t>

          </list></t>

          <t>The message exchange is terminated when time T2 is reached (see
          section 18.1.4), at which time the client begins a Rebind message
          exchange.</t>

       </list></t>
     </section>

     <section title="Updates to Section 18.1.4. of RFC 3315">
       <t>Replace Section 18.2.3 of RFC 3315 with the following text:
       <list hangIndent="2" style="hanging">
         <t> At time T2 for an IA (which will only be reached if the server to
         which the Renew message was sent at time T1 has not responded),
         the client initiates a Rebind/Reply message exchange with any
         available server.</t>

         <t>The client constructs the Rebind message as described in 18.1.3.
         with the following differences:

         <list style="hanging">
         <t hangText="-"> The client sets the "msg-type" field to REBIND.</t>

         <t hangText="-"> The client does not include the Server Identifier
         option in the Rebind message.</t>

         </list></t>

         <t>The client transmits the message according to section 14, using the
         following parameters:

          <list hangIndent="11" style="hanging">

          <t hangText="   IRT"> REB_TIMEOUT</t>

          <t hangText="   MRT"> REB_MAX_RT</t>

          <t hangText="   MRC"> 0</t>

          <t hangText="   MRD"> Remaining time until valid lifetimes of all
          addresses in all IAs have expired</t>

          </list></t>

          <t>If all addresses for an IA have expired the client may choose to
          include this IA without any addresses (or with only a hint) in subsequent
          Rebind messages to indicate that the client is interested in assignment
          of the addresses to this IA.</t>

          <t>The message exchange is terminated when the valid lifetimes of all
          addresses across all IAs have expired, at which time the client
          may use a Solicit message to locate a new DHCP server and send a
          Request for the expired IAs to the new server.</t>

       </list></t>
     </section>

     <section title="Updates to Section 18.1.8. of RFC 3315">
       <t>Replace Section 18.1.8. of RFC 3315 with the following text:
       <list hangIndent="2" style="hanging">
         <t>Upon the receipt of a valid Reply message in response to a Solicit
         (with a Rapid Commit option), Request, Confirm, Renew, Rebind or
         Information-request message, the client extracts the configuration
         information contained in the Reply.  The client MAY choose to report
         any status code or message from the status code option in the Reply
         message.</t>

         <t>If the client receives a Reply message with a Status Code containing
         UnspecFail, the server is indicating that it was unable to process
         the message due to an unspecified failure condition.  If the client
         retransmits the original message to the same server to retry the
         desired operation, the client MUST limit the rate at which it
         retransmits the message and limit the duration of the time during
         which it retransmits the message.</t>

         <t>When the client receives a Reply message with a Status Code option
         with the value UseMulticast, the client records the receipt of the
         message and sends subsequent messages to the server through the
         interface on which the message was received using multicast.  The
         client resends the original message using multicast.</t>

         <t>When the client receives a NotOnLink status from the server in
         response to a Confirm message, the client performs DHCP server
         solicitation, as described in section 17, and client-initiated
         configuration as described in section 18.  If the client receives any
         Reply messages that do not indicate a NotOnLink status, the client
         can use the addresses in the IA and ignore any messages that indicate
         a NotOnLink status.</t>

         <t>When the client receives a NotOnLink status from the server in
         response to a Request, the client can either re-issue the Request
         without specifying any addresses or restart the DHCP server discovery
         process (see section 17).</t>

         <t>The client SHOULD perform duplicate address detection [17] on each of
         the received addresses in any IAs, on which it has not performed duplicate
         address detection during processing of any of the previous Reply
         messages from the server. The client performs the duplicate address
         detection before using the received addresses for the traffic. If
         any of the addresses are found to be in use on the link, the client
         sends a Decline message to the server for those addresses as described in section
         18.1.7.</t>

         <t>If the Reply was received in response to a Solicit (with a Rapid
         Commit option), Request, Renew or Rebind message, the client updates
         the information it has recorded about IAs from the IA options
         contained in the Reply message:

         <list style="hanging">
         <t hangText="-"> Record T1 and T2 times. The client MUST use the shortest
         (explicit or implicit) T1/T2 times (larger than 0), from the same IA option.
         T1/T2 times from other IAs are ignored.</t>

         <t hangText="-"> Add any new addresses in the IA option to the IA as
         recorded by the client.</t>

         <t hangText="-"> Update lifetimes for any addresses in the IA option
         that the client already has recorded in the IA.</t>

         <t hangText="-"> Discard any addresses from the IA, as recorded by
         the client, that have a valid lifetime of 0 in the IA Address option.</t>

         <t hangText="-"> Leave unchanged any information about addresses the
         client has recorded in the IA but that were not included in the IA
         from the server.</t>

         </list></t>

         <t>Management of the specific configuration information is detailed in
         the definition of each option in section 22.</t>

         <t>The client examines the status code in each IA individually. If the
         client receives a NoAddrsAvail, the client has received no usable
         addresses in the IA. The client uses addresses and other information
         from any IAs that do not contain a Status Code option with the NoAddrsAvail
         code. For each IA for which the client receives NoAddrsAvail status code
         the client has the following choices:

         <list style="hanging">
         <t hangText="-"> The client includes the IA with no addresses in subsequent
         Renew and Rebind messages sent to the server, to request creation of
         the binding for the IA.</t>

         <t hangText="-"> Tries another server (perhaps restarting the DHCP server
         discovery process).</t>

         <t hangText="-"> Uses Information-request message to obtain other
         configuration information only.</t>

         </list></t>
 
         <t>When the client receives a Reply message in response to a Renew or
         Rebind message, for each IA in the original Renew or Rebind message,
         the client:

         <list style="hanging">

           <t hangText="-"> Sends a Request message if the IA sent in the Renew or Rebind
           contained addresses that the client is currently using and the
           server responded with NoBinding status code.</t>

           <t hangText="-"> Tries to obtain the IA from another server (by
           restarting the DHCP discovery process) if the client attempted
           to obtain a new binding in the Renew or Rebind message by sending an
           IA without any  addresses and the server responded with NoBinding
           status code.</t>

<!-- Marcin: Could this be as simple as below? -->
           <t hangText="-"> Follow the retransmission procedure for Renew/Rebind
           messages as described in section 14. if the IA is not in the Reply
           message.</t>

           <t hangText="-"> Otherwise accepts the information in the IA.</t>

         </list></t>

         <t>When the client receives a valid Reply message in response to a
         Release message, the client considers the Release event completed,
         regardless of the Status Code option(s) returned by the server.</t>

         <t>When the client receives a valid Reply message in response to a
         Decline message, the client considers the Decline event completed,
         regardless of the Status Code option(s) returned by the server.</t>

       </list></t>
     </section>

     <section title="Updates to Section 18.2.3. of RFC 3315">

       <t>Replace Section 18.2.3. of RFC 3315 with the following text:
       <list hangIndent="2" style="hanging">

         <t>When the server receives a Renew message via unicast from a client to
         which the server has not sent a unicast option, the server discards
         the Renew message and responds with a Reply message containing a
         Status Code option with the value UseMulticast, a Server Identifier
         option containing the server's DUID, the Client Identifier option
         from the client message, and no other options.</t>

         <t>For each IA in the Renew message from a client, the server locates
         the client's binding and verifies that the information in the IA
         from the client matches the information stored for that client.</t>

         <t>If the server finds the addresses in the IA for the client then the
         server sends back the IA to the client with new lifetimes and,
         if applicable, T1/T2 times. If the server is unable to extend the
         lifetimes of an address in the IA, the server MAY choose not to include
         the IA Address option for this address.</t>

         <t>The server may choose to change the list of addresses and the
         lifetimes of addresses in IAs that are returned to the client.</t>

         <t>If the server finds that any of the addresses in the IA are not
         appropriate for the link to which the client is attached, the server
         returns the address to the client with lifetimes of 0.</t>

         <t>For each IA for which the server cannot find a client entry, the server
         has the following choices depending on the server's policy and
         configuration information:

         <list style="hanging">
           <t hangText="-">If the server is configured to create new bindings
           as a result of processing Renew messages, the server SHOULD create
           a binding and return the IA with allocated addresses with lifetimes
           and, if applicable, T1/T2 times and other information requested by
           the client. The server MAY use values in the IA Address option
           (if included) as a hint.</t>

           <t hangText="-">If the server is configured to create new bindings
           as a result of processing Renew messages, but the server will not
           assign any addresses to an IA, the server returns the IA option
           containing a Status Code option with the NoAddrsAvail status code
           and a status message for a user.</t>

           <t hangText="-">If the server does not support creation of new
           bindings for the client sending a Renew message, or if this behavior
           is disabled according to the server's policy or configuration
           information, the server returns the IA option containing a Status
           code option with the NoBinding status code and a status message for
           a user.</t>
         </list></t>

         <t>The server constructs a Reply message by setting the "msg-type" field
         to REPLY, and copying the transaction ID from the Renew message into
         the transaction-id field.</t>

         <t>The server MUST include a Server Identifier option containing the
         server's DUID and the Client Identifier option from the Renew message
         in the Reply message.</t>

         <t>The server includes other options containing configuration
         information to be returned to the client as described in section
         18.2.</t>

       </list></t>
     </section>

     <section title="Updates to Section 18.2.4. of RFC 3315">
       <t>Replace Section 18.2.4. of RFC 3315 with the following text:
       <list style="hanging">
         <t>When the server receives a Rebind message that contains an IA
         option from a client, it locates the client's binding and verifies
         that the information in the IA from the client matches the
         information stored for that client.</t>

         <t>If the server finds the addresses in the IA for the client and the
         server determines that the addresses in the IA are appropriate for
         the link to which the client's interface is attached according to
         the server's explicit configuration information, the server SHOULD
         send back the IA to the client with new lifetimes and, if
         applicable, T1/T2 times. If the server is unable to extend the
         lifetimes of an address in the IA, the server MAY choose not to
         include the IA Address option for this address.</t>

         <t>If the server finds the client entry for the IA and any of the
         addresses are no longer appropriate for the link to which the
         client's interface is attached according to the server's explicit
         configuration information, the server returns the addresses to the
         client with lifetimes of 0.</t>

         <t>If the server cannot find a client entry for the IA, the IA contains
         addresses and the server determines that the addresses in the IA are
         not appropriate for the link to which the client's interface is attached
         according to the server's explicit configuration information, the server
         MAY send a Reply message to the client containing the client's IA, with
         the lifetimes for the addresses in the IA set to 0. This Reply constitutes
         an explicit notification to the client that the addresses in the IA are
         no longer valid. In this situation, if the server does not send a
         Reply message it silently discards the Rebind message.</t>

         <t>Otherwise, for each IA for which the server cannot find a client entry,
         the server has the following choices depending on the server's policy and
         configuration information:

         <list style="hanging">
           <t hangText="-">If the server is configured to create new bindings
           as a result of processing Rebind messages (also see the note about
           the Rapid Commit option below), the server SHOULD create a binding and
           return the IA with allocated addresses with lifetimes and, if applicable,
           T1/T2 times and other information requested by the client. The server
           MAY use values in the IA Address option (if included) as a hint.</t>

           <t hangText="-">If the server is configured to create new bindings
           as a result of processing Rebind messages, but the server will not
           assign any addresses to an IA, the server returns the IA option
           containing a Status Code option with the NoAddrsAvail status code
           and a status message for a user.</t>

           <t hangText="-">If the server does not support creation of new
           bindings for the client sending a Rebind message, or if this
           behavior is disabled according to the server's policy or
           configuration information, the server returns the IA option
           containing a Status Code option with the NoBinding status code
           and a status message for a user.</t>
         </list></t>

         <t>When the server creates new bindings for the IA it is possible that
         other servers also create bindings as a result of receiving the
         same Rebind message.  This is the same issue as in the Discussion
         under the Rapid Commit option, see section 22.14.  Therefore, the
         server SHOULD only create new bindings during processing of a
         Rebind message if the server is configured to respond with a Reply
         message to a Solicit message containing the Rapid Commit option.</t>

         <t>The server constructs a Reply message by setting the "msg-type"
         field to REPLY, and copying the transaction ID from the Rebind
         message into the transaction-id field.</t>

         <t>The server MUST include a Server Identifier option containing the
         server's DUID and the Client Identifier option from the Rebind
         message in the Reply message.</t>

         <t>The server includes other options containing configuration
         information to be returned to the client as described in section
         18.2.</t>

       </list></t>
     </section>

      <section title="Updates to RFC 3633">
        <t>Replace Section 12.1:</t>
        <t><list>
          <t>Each prefix has valid and preferred lifetimes whose durations are
          specified in the IA_PD Prefix option for that prefix.  The requesting
          router uses Renew and Rebind messages to request the extension of the
          lifetimes of a delegated prefix.</t>
        </list></t>

        <t>With:</t>

        <t><list>
          <t>Each prefix has valid and preferred lifetimes whose durations are
          specified in the IA_PD Prefix option for that prefix.  The requesting
          router uses Renew and Rebind messages to request the extension of the
          lifetimes of a delegated prefix.</t>

          <t>The requesting router MAY include IA_PD options without any prefixes,
          i.e. without IA Prefix option or with IPv6 prefix field of IA Prefix option
          set to 0, in a Renew or Rebind message to obtain bindings it desires
          but has been unable to obtain. The requesting router MAY set the prefix-length
          field of the IA Prefix option as a hint to the server.</t>
        </list></t>

        <t>Replace Section 12.2:</t>
        <t><list>
          <t>The delegating router behaves as follows when it cannot find a
          binding for the requesting router's IA_PD:</t>
        </list></t>
        <t>With:</t>

        <t><list>
          <t>For the Renew or Rebind, if the IA_PD contains no prefixes,
          i.e. contains no IA Prefix option or the IPv6 prefix field in the
          IA Prefix option is set to 0, the delegating router MAY assign
          prefixes to the IA_PD according to the delegating router's explicit
          configuration information. In this case, when the server assigns
          new prefixes to the IA_PD, the server MAY use the value in the
          prefix-length field of the IA Prefix option as a hint for the
          length of the prefixes being assigned.</t>

          <t>The delegating router behaves as follows when it cannot find
          a binding for the requesting router's IA_PD containing prefixes:
          </t>
        </list></t>
    </section>


    </section>

      <section title="Confirm Message">
	<t>The Confirm message, as described in <xref target="RFC3315"/>,
        is specific to address assignment. It allows a server without a
        binding to reply to the message, under the assumption that the
        server only needs knowledge about the prefix(es) on the link,
        to inform the client that the address is likely valid or not.
        This message is sent when e.g. the client has moved and needs
        to validate its addresses. Not all bindings can be validated by
        servers and the Confirm message provides for this by specifying
        that a server that is unable to determine the on-link status
        MUST NOT send a Reply.</t>

	<t>Note: Confirm has a specific meaning and does not overload
	Renew/Rebind. It also is lower processing cost as the server
	does NOT need to extend lease times or otherwise send back
	other configuration options.</t>

	<t>The Confirm message is used by the client to verify that it
	has not moved to a different link. For IAs with addresses, the
	mechanism used to verify if a client has moved or not, is by
	matching the link's on-link prefix(es) (typically a /64)
	against the prefix-length first bits of the addresses provided
	by the client in the IA_NA or IA_TA IA-types. As a consequence
	Confirm can only be used when the client has an IA with
	address(es) (IA_NA or IA_TA).</t>

	<t>A client MUST have a binding including an IA with addresses
	to use the Confirm message. A client with IAs with addresses
	as well as other IA-types MAY, depending on the IA-type, use
	the Confirm message to detect if the client has moved to a
	different link. A client that does not have a binding with an
	IA with addresses MUST use the Rebind message instead.</t>

	<t>IA_PD requires verification that the server has the binding
	for the IAs. In that case a client MUST use the Rebind message
	in place of the Confirm message and it MUST include all of its
	bindings, even address IAs.</t>
	
	<t>Note that Section 18.1.2 of RFC3315 states that a client
	MUST initiate a Confirm when it may have moved to a new link.
	This is relaxed to a SHOULD as a client may have determined
	whether it has or has not moved using other techniques, such as
	described in <xref target="RFC6059"/>. And, as stated above, a
	client with delegated prefixes, MUST send a Rebind instead of
	a Confirm.</t>

      </section>

      <section title="Decline Should Not Necessarily Trigger a Release">

      <t>Some client implementations have been found to send a Release
      message for other bindings they may have received after they
      determine a conflict and have correctly sent a Decline message
      for the conflicting address(es).
      </t>
      
      <t>It is recommended that a client SHOULD NOT send a Release
      message for other bindings it may have received just because it
      sent a Decline message. The client should retain the non-conflicting
      bindings.</t>

      </section>

      <section title="Multiple Provisioning Domains">
          <t>This document has assumed that all DHCP servers on a
          network are in a single provisioning domain and thus should be
          "equal" in the service that they offer. This was also assumed
          by <xref target="RFC3315"/> and <xref target="RFC3633"/>.</t>

          <t>One could envision a network where the DHCP servers are in multiple
          provisioning domains, and it may be desirable to have the DHCP client
          obtain different IA types from different provisioning domains. How a
          client detects the multiple provisioning domains and how it would
          interact with the multiple servers in these different domains is outside
          the scope of this document.</t>

      </section>

    </section>

    <!--  SECTION 5:  IANA Considerations           -->

    <section title="IANA Considerations">
      <t>This specification does not require any IANA actions.</t>
    </section>

    <!--  SECTION 6:  Security Considerations      	-->

    <section title="Security Considerations">
      <t>There are no new security considerations pertaining to this
      document.</t>
    </section>

    <!--  SECTION 7:  Acknowledgements     			-->

    <section title="Acknowledgements">

    <t>Thanks to many people that contributed to identify the issues in this
    document, including Ralph Droms, John, Brzozowski, Ted Lemon, Hemant Singh,
    Wes Beebee, Gaurau Halwasia, Bud Millword, Tim Winters, and Rob Shakir.</t>

    </section>
  </middle>

  <back>
    <!--  SECTION 8.1:  Normative References		-->

    <references title="Normative References">
      &rfc2119;
      &rfc3315;
      &rfc3633;
      &rfc7083;
    </references>

    <!--  SECTION 8.2:  Informative References		-->

    <references title="Informative References">
      &rfc4941;
      &rfc6059;
      &rfc7084;
      &rfc7227;
      <?rfc include="reference.I-D.dhcwg-dhc-rfc3315bis" ?>
    </references>

  </back>
</rfc>

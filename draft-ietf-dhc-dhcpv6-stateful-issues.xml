<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc toc="yes" ?>
<?rfc tocompact="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc comments="yes" ?>
<?rfc inline="yes" ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY rfc4941 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4941.xml">
<!ENTITY rfc3315 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3315.xml">
<!ENTITY rfc3633 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3633.xml">
<!ENTITY rfc6059 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6059.xml">
<!ENTITY rfc7084 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7084.xml">
<!ENTITY rfc7083 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7083.xml">
<!ENTITY rfc7227 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7227.xml">
]>

<rfc category="std" docName="draft-ietf-dhc-dhcpv6-stateful-issues-07.txt"
     ipr="trust200902" updates="3315,3633">
  <front>
    <title abbrev="Multiple Stateful Options">
    Issues and Recommendations with Multiple Stateful DHCPv6 Options</title>

    <author fullname="Ole Troan" initials="O" surname="Troan">
      <organization abbrev="">Cisco Systems, Inc.</organization>
      <address>
        <postal>
          <street>Philip Pedersens vei 20</street>
          <city>N-1324 Lysaker</city>
          <region></region>
          <code></code>
          <country>Norway</country>
        </postal>
        <email>ot@cisco.com</email>
      </address>
    </author>
    <author fullname="Bernie Volz" initials="B" surname="Volz">
      <organization abbrev="">Cisco Systems, Inc.</organization>
      <address>
        <postal>
          <street>1414 Massachusetts Ave</street>
          <city>Boxborough, MA  01719</city>
          <region></region>
          <code></code>
          <country>USA</country>
        </postal>
        <email>volz@cisco.com</email>
      </address>
    </author>
    <author fullname="Marcin Siodelski" initials="M" surname="Siodelski">
      <organization abbrev="">ISC</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <region>CA</region>
          <code>94063</code>
          <country>USA</country>
        </postal>
        <email>msiodelski@gmail.com</email>
      </address>
    </author>

    <date year="2014" />

    <area>Internet</area>

    <workgroup>Network Working Group</workgroup>

    <!--  SECTION 0:  Abstract                      -->

    <abstract>
      <t>Dynamic Host Configuration Protocol for IPv6 (DHCPv6) was not
      written with the expectation that additional stateful DHCPv6
      options would be developed. IPv6 Prefix Options for Dynamic Host
      Configuration Protocol (DHCP) version 6 shoe-horned the new
      options for Prefix Delegation into DHCPv6. Implementation
      experience of the CPE model described in RFC 7084
      has shown multiple issues with the DHCPv6 protocol in supporting
      multiple stateful options. This document updates RFC 3315 and
      RFC 3633.</t>
    </abstract>
  </front>

  <middle>
    <!--  SECTION 1:  Introduction                  -->

    <section title="Introduction">

      <t>DHCPv6 <xref target="RFC3315"/> was not written with the
      expectation that additional stateful DHCPv6 options would be
      developed.  DHCPv6 Prefix Delegation <xref target="RFC3633"/>
      shoe-horned the new options for Prefix Delegation into DHCPv6.
      Implementation experience of the CPE model described in
      <xref target="RFC7084"/> has shown issues with the DHCPv6
      protocol in supporting multiple stateful option types, in
      particular IA_NA and IA_PD.</t>

      <t>This document describes a number of problems encountered
      with coexistence of the IA_NA and IA_PD option types and
      changes to the DHCPv6 protocol specifications to address
      these problems.</t>

      <t>The intention of this work is to clarify and, where needed, modify
      the DHCP protocol specification to support multiple IA option types
      within a single DHCP session. However, as it is not possible to
      know what future IA option types might be used for, this work is
      primarily to clarify DHCP operation when IA_NA and IA_PD options
      are being requested as per <xref target="RFC7084"/>. And, to
      provide a framework to support new IA option types, assuming they
      are similar enough. Future documents that define new IA option
      types will need to specify whether they fit into this framework
      or define the DHCP operation for the new and existing IA option
      types, as appropriate.</t>

      <t>There are two general solutions to the problem of supporting
      multiple IA option types. One is by using a separate DHCP session
      (separate instances of the client state machine) per IA option type.
      While conceptually simple, this approach has a number of issues:
      multiple instances the state machine in clients, additional DHCP
      protocol traffic, 'collisions' between other configuration options,
      divergence in that each IA option type specification specifies its
      'own' version of the DHCP protocol. The other is by using a single
      DHCP session and state machine, which is the approach taken by
      this document (see <xref target='single-session'/>).</t>

      <t>Note that while IA_TA options may be included with other IA option
      type requests, these generally are not renewed (there are no T1/T2
      times) and have a separate life cycle from IA_NA and IA_PD option
      types.  IA_TA also has limited value when DHCPv6 is used for address
      assignment, as the privacy issues identified for IPv6 stateless
      address assignment (<xref target="RFC4941"/>) do not apply to
      DHCPv6 assignments.</t>

      <t>The changes described in this document are intended to be
      incorporated in a new revision of the DHCPv6 protocol
      specification (<xref target="I-D.dhcwg-dhc-rfc3315bis"/>).</t>

    </section>

    <!--  SECTION 2: REQUIREMENTS LANGUAGE                                         -->

    <section title="Conventions">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119"></xref>.</t>
    </section>

    <!-- conventions -->

    <!--  SECTION 3: DESCRIPTION                                                   -->

    <section title="Terminology">
    <t>In addition to the terminology defined in <xref target="RFC3315"/>,
    <xref target="RFC3633"/>, and <xref target="RFC7227"/>, the following
    terminology is used in this document:
    </t>
      <t><list hangIndent="32" style="hanging">

	<t hangText="Resource (allocable resource):">
	  A value (or a collection of values) dynamically assigned to the
	  client by the server and being carried in the stateful options.
	  Examples of resources are an IPv6 address or an
	  IPv6 prefix. Information about the resources is transported
	  in stateful options such as IA_NA, for addresses, and IA_PD,
	  for prefix delegations. In the future, other types of resources
	  and stateful options may be defined.</t>

	<t hangText="Identity association (IA):">
	  A collection of resources assigned to a client. Each
	  IA has an associated IAID. A client may have more than one
	  IA assigned to it; for example, one for each of its
	  interfaces. Each IA holds one type of IA option; for example,
	  an identity association for temporary addresses (IA_TA)
	  holds temporary addresses. Throughout this document, "IA" is
	  used to refer to an identity association without identifying
	  the type of resources in the IA.</t>

	<t hangText="IA option types:">
	  This is used to generally mean an IA_NA and/or IA_PD and may also
	  include IA_TA, as well as any future IA options.</t>
	  
	<t hangText="Stateful options:">
	  Options that require dynamic binding state per client on the
	  server.</t>	  

	</list></t>
    </section>

    <!--  SECTION 4: Handling of Multiple IA Options Types                         -->

    <section anchor='single-session' title="Handling of multiple IA options types">
      <t>DHCPv6 was written with the assumption that the only stateful
      options were for assigning addresses. DHCPv6 PD describes how
      to extend the DHCPv6 protocol to handle prefix delegation, but
      <xref target="RFC3633"/> did not consider how DHCP address
      assignment and prefix delegation could co-exist.</t>

      <t>If a client requests multiple IA option types, but the server
      is configured to only offer a subset of them, the client could
      react in several ways. Reset the state machine and continue to
      send Solicit messages, create separate DHCP sessions for each
      IA option type and continue to Solicit for the unfulfilled IA
      options,
      or it could continue with the single session, and include the
      unfulfilled IA options on subsequent messages to the server.</t>

      <t>Proposed solution: the client should keep a single session
      with the server and include the missing options on subsequent
      messages (Request, Renew, and Rebind) to the server.</t>

      <section title="Placement of Status Codes">
	<t>
	In Reply messages IA specific status codes (i.e., NoAddrsAvail,
	NotOnlink, NoBinding, NoPrefixAvail) are encapsulated in the IA
	option.  In Advertise messages the Status Code option with
	the NoAddrsAvail code is in the top-level. That makes
	sense when the failure case is fatal. However, with the
	introduction of other stateful option types, there may be
        cases where a server is not willing to offer addresses, but is
        willing to offer other resources, e.g. delegated prefixes.
	</t>

	<t>
	Ideally the Status Code option should be encapsulated in the IA
	option for all DHCP messages. This also makes the NoAddrsAvail
	and NoPrefixAvail Status Code option placement for Advertise
	messages identical to Reply messages.
	</t>

	<t>
	In addition, how a server formats the Advertise message when
	addresses are not available has been a point of some confusion
	and implementations seem to vary (some strictly follow RFC 3315
	while others assumed it was encapsulated in the IA option as for
	Reply messages).
	</t>

	<t>
	Therefore, the Proposed solution is:
	</t>

	<t>
	Clients MUST be prepared to handle each of the following Advertise
	messages formats when there are no addresses available (even when
	no other IA option types were in the Solicit):
	<list style="numbers">
	<t>
	Advertise containing just a top-level Status Code option (of
	NoAddrsAvail) and no IA_NAs/IA_TAs.
	</t>
	<t>
	Advertise containing the IA_NAs and/or IA_TAs with encapsulated
	Status Code option (of NoAddrsAvail) and no top-level Status
	Code option.
	</t>
	<t>
	Advertise containing a top-level Status Code option (of
	NoAddrsAvail) and IA_NAs and/or IA_TAs with a Status Code option
	(of NoAddrsAvail).
	</t>
	</list>
	</t>

	<t>
	Servers MUST return the Status Code option (of
	NoAddrsAvail) encapsulated in an IA_NA/IA_TA options and not as a
        top-level Status Code option (of NoAddrsAvail) when no
        addresses will be assigned (2 in the above list). This means that
        the Advertise response matches the Reply response with respect to
        the handling of the NoAddrsAvail status.
	</t>

	<t>
	Replace the following paragraph in RFC 3315, section 17.2.2:
	</t>

<figure><artwork>
   If the server will not assign any addresses to any IAs in a
   subsequent Request from the client, the server MUST send an
   Advertise message to the client that includes only a Status
   Code option with code NoAddrsAvail and a status message for
   the user, a Server Identifier option with the server's DUID,
   and a Client Identifier option with the client's DUID.
</artwork></figure>

	<t>
	With:
	</t>

<figure><artwork>
   If the server will not assign any addresses to an IA in a
   subsequent Request from the client, the server MUST include
   the IA in the Advertise message with no addresses in the IA
   and a Status Code option encapsulated in the IA containing
   status code NoAddrsAvail.
</artwork></figure>

      </section>


      <section title="Advertise Message">
	<t><xref target="RFC3315"/> specifies that a client must ignore an Advertise
	message if a server will not assign any addresses to a
	client. A client requesting both IA_NA and IA_PD, with a
	server that only offers one of them, is not supported in the
	current protocol specification.</t>

	<t>Proposed solution: a client SHOULD accept Advertise messages,
	even when not all IA option types are being offered. And, in this
        case, the client SHOULD include the not offered IA option types
        in its Request. A client SHOULD only ignore an Advertise message
        when all IA options include no offered addresses or delegated
        prefixes. Note that ignored messages MUST still be processed for
        SOL_MAX_RT and INF_MAX_RT options as specified in <xref
        target="RFC7083"/>.</t>

	<t>Replace Section 17.1.3 of RFC 3315: (existing errata)</t>
	<figure><artwork>
  The client MUST ignore any Advertise message that includes a Status
  Code option containing the value NoAddrsAvail, with the exception
  that the client MAY display the associated status message(s) to the
  user.
	</artwork></figure>
	<t>With (this includes the changes made by <xref target="RFC7083"/>):</t>
	<figure><artwork>
  The client MUST ignore any Advertise message that contains no
  addresses (IAADDR options encapsulated in IA_NA or IA_TA options)
  and no delegated prefixes (IAPREFIX options encapsulated in IA_PD
  options, see RFC 3633) with the exception that the client
  MUST process an included SOL_MAX_RT option (RFC 7083), MUST
  process an included INF_MAX_RT option (RFC 7083), and MAY
  display any associated status message(s) to the user.
	</artwork></figure>

	<t>And, replace:</t>
	<figure><artwork>
  -  The client MAY choose a less-preferred server if that server
     has a better set of advertised parameters, such as the
     available addresses advertised in IAs.
	</artwork></figure>
	<t>With:</t>
 	<figure><artwork>
  -  The client MAY choose a less-preferred server if that server
     has a better set of advertised parameters, such as the
     available options advertised in IAs.
	</artwork></figure>

        <t>It is important to note that the receipt of an Advertise message
	without any addresses and delegated prefixes does not imply that
	the client should restart the Solicit retransmissions timers. Doing
	so would lead to a Solicit/Advertise storm.</t>

      </section>


      <section title="T1/T2 Timers">
	<t>The T1 and T2 times determine when the client will contact
	the server to extend lifetimes of information received in an
	IA. How should a client handle the case where multiple IA
	options have different T1 and T2 times?</t>

	<t>In a multiple IA option type model, the T1/T2 times are
	protocol timers, that should be independent of the IA options
	themselves. If we were to redo the DHCP protocol from scratch
	the T1/T2 times should be carried in a separate DHCP
	option.</t>

	<t>Proposed solution: The server MUST set the T1/T2 times
	in all IA options in a Reply or Advertise message to the same
        value. To deal with the case where servers have not yet been
        updated to do that, clients MUST use the shortest (explicit or
        implicit) T1/T2 times (larger than 0), from the same IA option,
        in the Reply. T1/T2 times from other IAs are ignored.</t>

      </section>

    <section title="Renew and Rebind Messages">
      <t>This section presents issues with handling multiple IA option types
      in the context of creation and processing the Renew and Rebind messages.
      It also proposes relevant updates to the <xref target="RFC3315"/> and
      <xref target="RFC3633"/>.</t>
      <section title="Renew Message" anchor="renew-message">
        <t>The Renew message, as described in <xref target="RFC3315"/>,
        allows a client to only renew bindings assigned via a Request
        message.</t>

	    <t>In a multiple IA option type model, the Renew does not support
	    the ability for the client to renew one IA option type while
	    requesting bindings for other IA option types that were not
	    available when the client sent the Request.</t>

	    <t>Proposed solution: The client should continue with the IA
	    options received, while continuing to include the other IA
	    options in subsequent messages to the server. The client
	    and server processing need to be modified. Note that this
	    change makes the server's IA processing of Renew similar
        to the Request processing.</t>
      </section>

     <section title="Rebind Message">
       <t> In the <xref target="renew-message"/> it has been proposed that
       the client includes IA options in a Renew message for the bindings it
       desires but has been unable to obtain by sending a Request message,
       apart from the IA options for the existing bindings.</t>

       <t>At time T2, the client stops sending Renew messages to the server and
       initiates the Rebind/Reply message exchange with any available server.
       In this case, it should be possible to continue trying to obtain new
       bindings using the Rebind message if the client failed to get the
       response from the server to the Renew message.</t>

       <t>The Rebind message, as described in <xref target="RFC3315"/>
       does not explicitly specify what a server should do when an IA
       option which contains no addresses is present.</t>

       <t>Proposed solution: The client should continue with the IA options
       received and it MAY include additional IA options to request creation
       of additional bindings.</t>
     </section>

     <section title="Updates to RFC 3315 for Renew Processing">
	   <t>Replace Section 18.1.3 of RFC 3315:</t>
       <t><list>
         <t>At time T1 for an IA, the client initiates a Renew/Reply message
         exchange to extend the lifetimes on any addresses in the IA. The
         client includes an IA option with all addresses currently assigned
         to the IA in its Renew message.</t>
       </list></t>

	   <t>With:</t>

       <t><list>
         <t>At time T1 for an IA, the client initiates a Renew/Reply message
         exchange to extend the lifetimes on any addresses in the IA.  The
         client includes an IA option with all addresses currently assigned to
         the IA in its Renew message. The client also includes IA options for
         all other bindings for which the client is willing to extend the
         lifetimes of addresses. The client MUST only include addresses in the
         IA that the client obtained from the server and that the client is
         actively using.</t>

         <t>The client MAY include IA option for each binding it desires but has
         been unable to obtain. This IA option MUST NOT contain any addresses.
         However, it MAY contain the IA Address option with IPv6 address field
         set to 0.</t>
       </list></t>

	   <t>Replace Section 18.2.3 of RFC 3315:</t>
       <t><list>
         <t>If the server cannot find a client entry for the IA the server
         returns the IA containing no addresses with a Status Code option
         set to NoBinding in the Reply message.</t>
       </list></t>

	   <t>With:</t>

       <t><list>
         <!-- The part of the paragraph talking about NoBinding status code
              will have to be replaced with the text describing when the
              server returns NoBinding and when NoAddrsAvail -->
         <t>If the server cannot find a client entry for the IA the server
         creates the bindings for that client according to the server's
         policy and configuration information and returns the IAs and
         other information requested by the client. For each IA for which
         the server will not create a binding the server returns an IA option
         containing a Status Code option set to NoBinding in the Reply message.
         </t>
       </list></t>

       <t>Note that clients that communicate with servers that do not
       support this updated Renew processing will receive the NoBinding status
       for the IA which had no bindings. The client MUST continue
       to process the other IAs in the Reply. The client MAY attempt a
       Solicit/Advertise/Request/Reply sequence periodically to obtain
       bindings for these IAs. However, it MUST limit the frequency at
       which it does this to no more often than the renewal frequency.</t>
     </section>

     <section title="Updates to RFC 3315 for Rebind Processing">
	   <t>Replace Section 18.1.4 of RFC 3315:</t>
       <t><list>
         <t>At time T2 for an IA (which will only be reached if the server to
         which the Renew message was sent at time T1 has not responded), the
         client initiates a Rebind/Reply message exchange with any available
         server.  The client includes an IA option with all addresses
         currently assigned to the IA in its Rebind message.</t>
       </list></t>
	   <t>With:</t>

       <t><list>
         <t>At time T2 for an IA (which will only be reached if the server to
         which the Renew message was sent at time T1 has not responded), the
         client initiates a Rebind/Reply message exchange with any available
         server.  The client includes an IA option with all addresses
         currently assigned to the IA in its Rebind message. The client also
         includes IA options for all other bindings for which the client is
         willing to extend the lifetimes of addresses. The client MUST only
         include addresses in the IA that the client obtained from the server
         and that the client is actively using.</t>

         <t>The client MAY include IA option for each binding it desires but has
         been unable to obtain. This IA option MUST NOT contain any addresses.
         However, it MAY contain the IA Address option with IPv6 address field
         set to 0.</t>
       </list></t>

       <t>Replace Section 18.2.4 of RFC 3315 with the
       following text to clarify how the server should handle all of the
       possible conditions:

   <list hangIndent="2" style="hanging">

   <t hangText="">
   When the server receives a Rebind message that contains an IA option
   from a client, it locates the client's binding and verifies that the
   information in the IA from the client matches the information stored
   for that client.
   </t>

   <t hangText="">
   If the server finds the addresses in the IA for the client and the
   server determines that the addresses in the IA are appropriate for
   the link to which the client's interface is attached according to the
   server's explicit configuration information, the server SHOULD send
   back the IA to the client with new lifetimes and T1/T2 times.
   </t>

   <t hangText="">
   If the server cannot find a client entry for the IA and the server
   determines that the addresses in the IA are not appropriate for the
   link to which the client's interface is attached according to the
   server's explicit configuration information, the server MAY send a
   Reply message to the client containing the client's IA, with the
   lifetimes for the addresses in the IA set to zero.  This Reply
   constitutes an explicit notification to the client that the addresses
   in the IA are no longer valid.  In this situation, if the server does
   not send a Reply message it silently discards the Rebind message.
   </t>

   <t hangText="">
   <!-- This paragraph talks about the status code NoBinding being included
   in the server's response. It will have to be replaced with a text that
   introduces NoAddrsAvail in the IAs for which nothing has been allocated -->
   If the server cannot find a client entry for the IA and the IA contains
   no addresses or it contains an IA Address option with IPv6 address field
   set to 0, the server MAY assign the addresses to this IA and send a
   Reply message to the client with this IA containing allocated addresses
   with lifetimes and T1/T2 times. If the server does not allocate addresses
   to the client, the server returns the IA containing only Status Code
   option set to NoBinding in the Reply message.
   </t>

   <t hangText="">
   When the server creates new bindings for the IA it is possible that
   other servers also create bindings as a result of receiving the same
   Rebind message. This is the same issue as in the Discussion under
   the Rapid Commit option, see section 22.14. Therefore, the server
   SHOULD only create new bindings during processing of a Rebind message
   if the server is configured to respond with a Reply message to a
   Solicit message containing the Rapid Commit option.
   </t>

   <t hangText="">
   The server constructs a Reply message by setting the "msg-type" field
   to REPLY, and copying the transaction ID from the Rebind message into
   the transaction-id field.
   </t>

   <t hangText="">
   The server MUST include a Server Identifier option containing the
   server's DUID and the Client Identifier option from the Rebind
   message in the Reply message.
   </t>

   <t hangText="">
   The server includes other options containing configuration
   information to be returned to the client as described in section
   18.2.
   </t>

   </list></t>
        </section>


      <section title="Updates to RFC 3633">
        <t>Replace Section 12.1:</t>
        <t><list>
          <t>Each prefix has valid and preferred lifetimes whose durations are
          specified in the IA_PD Prefix option for that prefix.  The requesting
          router uses Renew and Rebind messages to request the extension of the
          lifetimes of a delegated prefix.</t>
        </list></t>

        <t>With:</t>

        <t><list>
          <t>Each prefix has valid and preferred lifetimes whose durations are
          specified in the IA_PD Prefix option for that prefix.  The requesting
          router uses Renew and Rebind messages to request the extension of the
          lifetimes of a delegated prefix.</t>

          <t>The requesting router MAY include IA_PD options without any prefixes,
          i.e. without IA Prefix option or with IPv6 prefix field of IA Prefix option
          set to 0, in a Renew or Rebind message to obtain bindings it desires
          but has been unable to obtain. The requesting router MAY set the prefix-length
          field of the IA Prefix option as a hint to the server.</t>
        </list></t>

        <t>Replace Section 12.2:</t>
        <t><list>
          <t>The delegating router behaves as follows when it cannot find a
          binding for the requesting router's IA_PD:</t>
        </list></t>
        <t>With:</t>

        <t><list>
          <t>For the Renew or Rebind, if the IA_PD contains no prefixes,
          i.e. contains no IA Prefix option or the IPv6 prefix field in the
          IA Prefix option is set to 0, the delegating router MAY assign
          prefixes to the IA_PD according to the delegating router's explicit
          configuration information. In this case, when the server assigns
          new prefixes to the IA_PD, the server MAY use the value in the
          prefix-length field of the IA Prefix option as a hint for the
          length of the prefixes being assigned.</t>

          <t>The delegating router behaves as follows when it cannot find
          a binding for the requesting router's IA_PD containing prefixes:
          </t>
        </list></t>
    </section>


    </section>

      <section title="Confirm Message">
	<t>The Confirm message, as described in <xref target="RFC3315"/>,
        is specific to address assignment. It allows a server without a
        binding to reply to the message, under the assumption that the
        server only needs knowledge about the prefix(es) on the link,
        to inform the client that the address is likely valid or not.
        This message is sent when e.g. the client has moved and needs
        to validate its addresses. Not all bindings can be validated by
        servers and the Confirm message provides for this by specifying
        that a server that is unable to determine the on-link status
        MUST NOT send a Reply.</t>

	<t>Note: Confirm has a specific meaning and does not overload
	Renew/Rebind. It also is lower processing cost as the server
	does NOT need to extend lease times or otherwise send back
	other configuration options.</t>

	<t>The Confirm message is used by the client to verify that it
	has not moved to a different link. For IAs with addresses, the
	mechanism used to verify if a client has moved or not, is by
	matching the link's on-link prefix(es) (typically a /64)
	against the prefix-length first bits of the addresses provided
	by the client in the IA_NA or IA_TA IA-types. As a consequence
	Confirm can only be used when the client has an IA with
	address(es) (IA_NA or IA_TA).</t>

	<t>A client MUST have a binding including an IA with addresses
	to use the Confirm message. A client with IAs with addresses
	as well as other IA-types MAY, depending on the IA-type, use
	the Confirm message to detect if the client has moved to a
	different link. A client that does not have a binding with an
	IA with addresses MUST use the Rebind message instead.</t>

	<t>IA_PD requires verification that the server has the binding
	for the IAs. In that case a client MUST use the Rebind message
	in place of the Confirm message and it MUST include all of its
	bindings, even address IAs.</t>
	
	<t>Note that Section 18.1.2 of RFC3315 states that a client
	MUST initiate a Confirm when it may have moved to a new link.
	This is relaxed to a SHOULD as a client may have determined
	whether it has or has not moved using other techniques, such as
	described in <xref target="RFC6059"/>. And, as stated above, a
	client with delegated prefixes, MUST send a Rebind instead of
	a Confirm.</t>

      </section>

      <section title="Decline Should Not Necessarily Trigger a Release">

      <t>Some client implementations have been found to send a Release
      message for other bindings they may have received after they
      determine a conflict and have correctly sent a Decline message
      for the conflicting address(es).
      </t>
      
      <t>It is recommended that a client SHOULD NOT send a Release
      message for other bindings it may have received just because it
      sent a Decline message. The client should retain the non-conflicting
      bindings.</t>

      </section>

      <section title="Multiple Provisioning Domains">
          <t>This document has assumed that all DHCP servers on a
          network are in a single provisioning domain and thus should be
          "equal" in the service that they offer. This was also assumed
          by <xref target="RFC3315"/> and <xref target="RFC3633"/>.</t>

          <t>One could envision a network where the DHCP servers are in multiple
          provisioning domains, and it may be desirable to have the DHCP client
          obtain different IA types from different provisioning domains. How a
          client detects the multiple provisioning domains and how it would
          interact with the multiple servers in these different domains is outside
          the scope of this document.</t>

      </section>

    </section>

    <!--  SECTION 5:  IANA Considerations           -->

    <section title="IANA Considerations">
      <t>This specification does not require any IANA actions.</t>
    </section>

    <!--  SECTION 6:  Security Considerations      	-->

    <section title="Security Considerations">
      <t>There are no new security considerations pertaining to this
      document.</t>
    </section>

    <!--  SECTION 7:  Acknowledgements     			-->

    <section title="Acknowledgements">

    <t>Thanks to many people that contributed to identify the issues in this
    document, including Ralph Droms, John, Brzozowski, Ted Lemon, Hemant Singh,
    Wes Beebee, Gaurau Halwasia, Bud Millword, Tim Winters, and Rob Shakir.</t>

    </section>
  </middle>

  <back>
    <!--  SECTION 8.1:  Normative References		-->

    <references title="Normative References">
      &rfc2119;
      &rfc3315;
      &rfc3633;
      &rfc7083;
    </references>

    <!--  SECTION 8.2:  Informative References		-->

    <references title="Informative References">
      &rfc4941;
      &rfc6059;
      &rfc7084;
      &rfc7227;
      <?rfc include="reference.I-D.dhcwg-dhc-rfc3315bis" ?>
    </references>

  </back>
</rfc>
